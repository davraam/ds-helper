[{"path":"/PULL_REQUEST_TEMPLATE.html","id":"in-general","dir":"","previous_headings":"","what":"In general:","title":"NA","text":"test code https://armadillo.test.molgenis.org? ran styler:::style_active_pkg() style code-files ran devtools::check() sure documentation rerendered code quality checked?","code":""},{"path":"/PULL_REQUEST_TEMPLATE.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes:","title":"NA","text":"create .orig file add pre-render.R file? run pre-render.R file regenerate vignettes run pkgdown::build_site() preview documentation","code":""},{"path":[]},{"path":"/articles/TROUBLESHOOTING.html","id":"dependencies","dir":"Articles","previous_headings":"Installing the package","what":"Dependencies","title":"Troubleshooting","text":"nloptr dependency install working linux-based system please install nlopt. CentOS Ubuntu Mac","code":"yum install nlopt nlopt-devel apt-get install libnlopt-dev brew install nlopt"},{"path":"/articles/TROUBLESHOOTING.html","id":"tidyrcpp-11-install-error","dir":"Articles","previous_headings":"Installing the package","what":"Tidyr/CPP 11 install error","title":"Troubleshooting","text":"get error trying install tidyr, run following lines code:","code":"remove.packages(\"tidyr\") remove.packages(\"cpp11\") library(remotes) install_github('r-lib/cpp11', ref = 'v0.1.0') install_github('tidyverse/tidyr', ref = 'v1.1.0')"},{"path":"/articles/ds-helper-main-vignette.html","id":"introducation","dir":"Articles","previous_headings":"","what":"Introducation","title":"Descriptive functions","text":"dsHelper contains number client-side functions designed simplify data manipulation analysis using DataSHIELD. Functions grouped following families: Descriptive functions Data manipulation functions Utility functions Functions trajectory models vignette demonstrates first three families function. Functions assist trajectory/mixed effect analysis described separate tutorial.","code":"#install.packages(\"remotes\") #library(remotes) #install_github(\"timcadman/ds-helper\") #install_github(\"datashield/DSI\") #install_github(\"datashield/dsBaseClient\") #install.packages(\"DSMolgenisArmadillo\") #install.packages(\"tidyverse\") library(dsHelper) library(DSI) library(dsBaseClient) library(DSMolgenisArmadillo) library(tidyverse)"},{"path":"/articles/ds-helper-main-vignette.html","id":"data-simulated-data-based-on-lifecycle-variables","dir":"Articles","previous_headings":"","what":"Data: simulated data based on LifeCycle variables","title":"Descriptive functions","text":"demonstrate functions use remote simulated data three cohorts: ALSPAC, BCG & BiB. unsure log , please consult DataSHIELD vignette: [link]","code":"url <- \"https://armadillo-demo.molgenis.net\" token <- armadillo.get_token(url)  builder <- DSI::newDSLoginBuilder()  builder$append( server = \"alspac\", url = url, table = \"trajectories/data/alspac\", token = token, driver = \"ArmadilloDriver\",  profile = \"xenon\")  builder$append( server = \"bcg\", url = url, table = \"trajectories/data/bcg\", token = token, driver = \"ArmadilloDriver\",  profile = \"xenon\")  builder$append( server = \"bib\", url = url, table = \"trajectories/data/bib\", token = token, driver = \"ArmadilloDriver\",  profile = \"xenon\")  logindata <- builder$build()  conns <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = \"data\") ds.colnames(\"data\") ## $alspac ## [1] \"id\"                 \"age\"                \"sex\"                \"ethnicity\"          \"father_socialclass\" ## [6] \"mother_education\"   \"weight\"             ##  ## $bcg ## [1] \"id\"                 \"age\"                \"sex\"                \"ethnicity\"          \"father_socialclass\" ## [6] \"mother_education\"   \"weight\"             ##  ## $bib ## [1] \"id\"                 \"age\"                \"sex\"                \"ethnicity\"          \"father_socialclass\" ## [6] \"mother_education\"   \"weight\""},{"path":[]},{"path":"/articles/ds-helper-main-vignette.html","id":"rename-variables-with-dh-renamevars","dir":"Articles","previous_headings":"Data manipulation functions","what":"Rename variables with dh.renameVars()","title":"Descriptive functions","text":"dh.renameVars allows change names one variables within dataframe. example, can rename variables “id”, “ethnicity” simpler names:","code":"dh.renameVars(   df = \"data\",   current_names = c(\"ethnicity\", \"father_socialclass\"),    new_names = c(\"race\", \"paternal_class\")) ds.colnames(\"data\") ## $alspac ## [1] \"id\"               \"age\"              \"sex\"              \"mother_education\" \"weight\"           \"race\"             ## [7] \"paternal_class\"   ##  ## $bcg ## [1] \"id\"               \"age\"              \"sex\"              \"mother_education\" \"weight\"           \"race\"             ## [7] \"paternal_class\"   ##  ## $bib ## [1] \"id\"               \"age\"              \"sex\"              \"mother_education\" \"weight\"           \"race\"             ## [7] \"paternal_class\""},{"path":"/articles/ds-helper-main-vignette.html","id":"removing-columns-with-dh-dropcols","dir":"Articles","previous_headings":"Data manipulation functions","what":"Removing columns with dh.dropCols()","title":"Descriptive functions","text":"dh.dropCols allows remove columns dataframe. argument “type” allows specify whether remove keep provided variables. example, can remove column “mat_ed”: Alternatively, can just keep certain columns remove everything else. example keep columns “sex”, “height_m” “ivf”:","code":"dh.dropCols(   df = \"data\",    vars = \"mother_education\",    type = \"remove\") ds.colnames(\"data\") ## $alspac ## [1] \"id\"             \"age\"            \"sex\"            \"weight\"         \"race\"           \"paternal_class\" ##  ## $bcg ## [1] \"id\"             \"age\"            \"sex\"            \"weight\"         \"race\"           \"paternal_class\" ##  ## $bib ## [1] \"id\"             \"age\"            \"sex\"            \"weight\"         \"race\"           \"paternal_class\" dh.dropCols(   df = \"data\",    vars = c(\"id\", \"age\", \"sex\", \"weight\"),    type = \"keep\") ds.colnames(\"data\") ## $alspac ## [1] \"id\"     \"age\"    \"sex\"    \"weight\" ##  ## $bcg ## [1] \"id\"     \"age\"    \"sex\"    \"weight\" ##  ## $bib ## [1] \"id\"     \"age\"    \"sex\"    \"weight\""},{"path":"/articles/ds-helper-main-vignette.html","id":"creating-strata-of-a-variable-with-dh-makestrata","dir":"Articles","previous_headings":"Data manipulation functions","what":"Creating strata of a variable with dh.makeStrata()","title":"Descriptive functions","text":"common scenario repeat measurements variable, want create individual versions variable within different age bands. example, may dataset repeat measurments height ages 2-18. However, want create new variable height ages 4-6. quite long process datashield, involves creating number subsets. also necessary deal situations subject >1 observation within specified period. example , create two variables child height measured () ages 4-6 (ii) ages 7-10. children one observation either window, opt take earliest measurement. behaviour controlled argument “mult_action”. can also choose take () latest variable, (ii) variable closest particular time point. Finally, within band choose take values >= lowest band, < highest band. behaviour controlled argument “band_action”. See ?dh.makeStrata information available arguments. example runs quite quickly, however using many cohorts large datasets can take considerable amount time (30 - 60 min). created dataset contains 5 variables: id variable, two variables giving height value within specified bands (height_.6, height_.10) two variables giving age measurement height variables (age.6, age.10). can use ds.merge join dataframe back main data:","code":"dh.makeStrata(   df = \"data\",   var_to_subset = \"weight\",   age_var = \"age\",    bands = c(4, 6, 7, 10),    mult_action = \"earliest\",   band_action = \"ge_l\",    id_var = \"id\",    new_obj = \"height_data\") ## Error in `left_join()`: ## ! Join columns in `x` must be present in the data. ## ✖ Problem with `cohort` and `suffix`. ds.colnames(\"height_data\") ## $alspac ## [1] \"id\"      \"tmp_obj\" ##  ## $bcg ## [1] \"id\"      \"tmp_obj\" ##  ## $bib ## [1] \"id\"      \"tmp_obj\" ds.merge(   x.name = \"data\",    y.name = \"height_data\",    by.x = \"id\",    by.y = \"id\",    all.x = TRUE,    newobj = \"data\") ds.colnames(\"data\") ## $alspac ## [1] \"id\"      \"age\"     \"sex\"     \"weight\"  \"tmp_obj\" ##  ## $bcg ## [1] \"id\"      \"age\"     \"sex\"     \"weight\"  \"tmp_obj\" ##  ## $bib ## [1] \"id\"      \"age\"     \"sex\"     \"weight\"  \"tmp_obj\""},{"path":"/articles/ds-helper-main-vignette.html","id":"transforming-continuous-variable-to-interquartile-range-using-dh-makeiqr","dir":"Articles","previous_headings":"Data manipulation functions","what":"Transforming continuous variable to interquartile range using dh.makeIQR()","title":"Descriptive functions","text":"scenarios (e.g. using environmental exposures) want standardise continuous variable transforming interquartile range. formula : value(subject) / 75th percentile(sample) - 25th percentile(sample) using data multiple cohorts two options denominator: () create IQR cohort using interquartile range cohort, (ii) create IQR cohort using combined interquartile range across cohorts. controlled argument type. example transform child weight. created variable suffix “iqr_c” type “separate” “iqr_p” type = “pooled”.","code":"dh.makeIQR(   df = \"data\",   vars = \"weight\",   type = \"split\",   new_obj = \"data\") ds.colnames(\"data\") ## $alspac ## [1] \"id\"           \"age\"          \"sex\"          \"weight\"       \"tmp_obj\"      \"weight_iqr_s\" ##  ## $bcg ## [1] \"id\"           \"age\"          \"sex\"          \"weight\"       \"tmp_obj\"      \"weight_iqr_s\" ##  ## $bib ## [1] \"id\"           \"age\"          \"sex\"          \"weight\"       \"tmp_obj\"      \"weight_iqr_s\" ds.summary(\"data$weight_iqr_s\") ## $alspac ## $alspac$class ## [1] \"numeric\" ##  ## $alspac$length ## [1] 129681 ##  ## $alspac$`quantiles & mean` ##        5%       10%       25%       50%       75%       90%       95%      Mean  ## 0.4091894 0.4749404 0.8753985 1.9270502 4.0167522 5.8588743 6.8073844 2.6408378  ##  ##  ## $bcg ## $bcg$class ## [1] \"numeric\" ##  ## $bcg$length ## [1] 12724 ##  ## $bcg$`quantiles & mean` ##        5%       10%       25%       50%       75%       90%       95%      Mean  ## 0.4297604 0.4883779 0.6827643 1.2218283 1.6454341 1.9312762 2.0859876 1.2049523  ##  ##  ## $bib ## $bib$class ## [1] \"numeric\" ##  ## $bib$length ## [1] 68864 ##  ## $bib$`quantiles & mean` ##        5%       10%       25%       50%       75%       90%       95%      Mean  ## 0.3423285 0.3857788 0.4784658 0.7840827 1.4784658 1.9096193 2.1163471 0.9941187"},{"path":"/articles/ds-helper-main-vignette.html","id":"removing-objects-from-workspace-using-dh-tidyenv","dir":"Articles","previous_headings":"Data manipulation functions","what":"Removing objects from workspace using dh.tidyEnv()","title":"Descriptive functions","text":"DataSHIELD function ds.rm() allows remove single objects workspace. However, may want remove number objects . Use argument type choose whether keep remove variables listed vars. chose keep “data” remove everything else.","code":"dh.tidyEnv(   obj = \"data\",   type = \"keep\") ds.ls() ## $alspac ## $alspac$environment.searched ## [1] \"R_GlobalEnv\" ##  ## $alspac$objects.found ## [1] \"data\" ##  ##  ## $bcg ## $bcg$environment.searched ## [1] \"R_GlobalEnv\" ##  ## $bcg$objects.found ## [1] \"data\" ##  ##  ## $bib ## $bib$environment.searched ## [1] \"R_GlobalEnv\" ##  ## $bib$objects.found ## [1] \"data\""},{"path":"/articles/ds-helper-main-vignette.html","id":"identifying-column-indices-using-dh-findvarsindex","dir":"Articles","previous_headings":"Data manipulation functions","what":"Identifying column indices using dh.findVarsIndex","title":"Descriptive functions","text":"occasions need know column set variables . example, function ds.dataFrameSubset takes input argument keep.cols vector column positions. Subsetting data frames column number highly susceptable breaking (e.g change order steps script). function allows identify column numbers vector column names, like :","code":"indices <- dh.findVarsIndex(   df = \"data\",   vars = c(\"sex\", \"age\", \"weight\")) indices ## $alspac ## [1] 2 3 4 ##  ## $bcg ## [1] 2 3 4 ##  ## $bib ## [1] 2 3 4"},{"path":[]},{"path":"/articles/ds-helper-main-vignette.html","id":"summarising-data-using-dh-getstats","dir":"Articles","previous_headings":"Describing data","what":"Summarising data using dh.getStats()","title":"Descriptive functions","text":"DataSHIELD functions ds.summary ds.table produce basic descriptive statistics. However, number limitations: output useable format, can specify one variable time, don’t provide information likely need manuscripts (e.g. missingness). describe multiple variables using dh.getStats(): output list two tibbles, corresponding categorical continuous variables. See help file list calculated figures stats.","code":"stats <- dh.getStats(   df = \"data\",   vars = c(\"age\", \"sex\", \"weight\") ) stats ## $categorical ## # A tibble: 0 × 10 ## # ℹ 10 variables: variable <chr>, cohort <chr>, category <chr>, value <dbl>, cohort_n <int>, valid_n <dbl>, ## #   missing_n <dbl>, perc_valid <dbl>, perc_missing <dbl>, perc_total <dbl> ##  ## $continuous ## # A tibble: 12 × 15 ##    variable cohort    mean std.dev perc_5 perc_10 perc_25 perc_50 perc_75 perc_90 perc_95 valid_n cohort_n missing_n ##    <chr>    <chr>    <dbl>   <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>    <dbl>     <dbl> ##  1 age      alspac    6.2     5.53   0       0.1     0.83    4.52   10.8    13.9    15.7   129681   129681         0 ##  2 age      bcg       2.01    1.67   0       0.12    0.5     1.52    3.51    4.53    4.99   12724    12724         0 ##  3 age      bib       1.48    1.74   0       0       0.08    0.71    2.11    4.72    4.98   68864    68864         0 ##  4 sex      alspac    0.49    0.5    0       0       0       0       1       1       1     129681   129681         0 ##  5 sex      bcg       0.48    0.5    0       0       0       0       1       1       1      12724    12724         0 ##  6 sex      bib       0.49    0.5    0       0       0       0       1       1       1      68864    68864         0 ##  7 weight   alspac   25.3    20.2    3.93    4.56    8.4    18.5    38.5    56.2    65.3   129681   129681         0 ##  8 weight   bcg      11.6     5.29   4.12    4.69    6.55   11.7    15.8    18.5    20.0    12724    12724         0 ##  9 weight   bib       9.54    5.81   3.28    3.7     4.59    7.52   14.2    18.3    20.3    68864    68864         0 ## 10 age      combined  4.41    5.01   0       0.07    0.57    3.1     7.55   10.4    11.6   211269   211269         0 ## 11 sex      combined  0.49    0.5    0       0       0       0       1       1       1     211269   211269         0 ## 12 weight   combined 19.4    17.9    3.73    4.29    7.05   14.5    29.2    41.6    47.9   211269   211269         0 ## # ℹ 1 more variable: missing_perc <dbl>"},{"path":"/articles/ds-helper-main-vignette.html","id":"extracting-model-coefficients-using-dh-lmtab","dir":"Articles","previous_headings":"Describing data","what":"Extracting model coefficients using dh.lmTab","title":"Descriptive functions","text":"run simple linear regression models DataSHIELD, coefficients returned within nested list. can bit tricky manually extract (e.g. create table plot). function extracts coefficients linear models outputs tibble. can also handle mixed-effect models also return summaries random effects. manuscripts may want include confidence intervals brackets point estimate. can specify argument “ci_format”:","code":"output <- ds.glm(formula = \"weight~age\", data = \"data\", family = \"gaussian\")  dh.lmTab(   model = output,    type = \"glm_ipd\",    direction = \"wide\",    ci_format  = \"separate\") ## Error: Assertion on 'model' failed. function (msg)  ## msgs <<- c(msgs, msg).  ## Error: Assertion on 'model' failed. function ()  ## msgs.  ## Error: Assertion on 'model' failed. function ()  ## length(msgs) == 0. dh.lmTab(   model = output,    type = \"glm_ipd\",    direction = \"wide\",    ci_format  = \"paste\") ## Error: Assertion on 'model' failed. function (msg)  ## msgs <<- c(msgs, msg).  ## Error: Assertion on 'model' failed. function ()  ## msgs.  ## Error: Assertion on 'model' failed. function ()  ## length(msgs) == 0."},{"path":"/articles/ds-helper-main-vignette.html","id":"checking-class-of-data-using-dh-classdiscrepancy","dir":"Articles","previous_headings":"Describing data","what":"Checking class of data using dh.classDiscrepancy()","title":"Descriptive functions","text":"ideal world variables class every study. However due mistakes harmonisation (scripts!) may case. can cause problems many DataSHIELD functions require input variable(s) class studies. Using dh.classDiscrepancy can produce tibble summarising class variable(s) across multiple studies. leave argument vars empty check class variables. column “discrepancy” summarises whether differences across studies.","code":"disc <- dh.classDiscrepancy(df = \"data\") disc ## # A tibble: 6 × 5 ##   variable     discrepancy alspac  bcg     bib     ##   <chr>        <chr>       <chr>   <chr>   <chr>   ## 1 id           no          numeric numeric numeric ## 2 age          no          numeric numeric numeric ## 3 sex          no          numeric numeric numeric ## 4 weight       no          numeric numeric numeric ## 5 tmp_obj      no          numeric numeric numeric ## 6 weight_iqr_s no          numeric numeric numeric"},{"path":"/articles/ds-helper-main-vignette.html","id":"checking-non-missing-data-using-dh-anydata","dir":"Articles","previous_headings":"Describing data","what":"Checking non-missing data using dh.anyData()","title":"Descriptive functions","text":"perform analyses multiple cohorts, may want use set covariates analyses. can use dh.anyData() check cohortsh least data given variables.","code":"available <- dh.anyData(   df = \"data\",   vars = c(\"age\", \"sex\", \"weight\")) available ## # A tibble: 3 × 4 ##   variable alspac bcg   bib   ##   <chr>    <lgl>  <lgl> <lgl> ## 1 age      TRUE   TRUE  TRUE  ## 2 sex      TRUE   TRUE  TRUE  ## 3 weight   TRUE   TRUE  TRUE"},{"path":"/articles/ds-helper-main-vignette.html","id":"creating-a-dataset-for-analysis-using-dh-definecases","dir":"Articles","previous_headings":"","what":"Creating a dataset for analysis using dh.defineCases()","title":"Descriptive functions","text":"starting analysis often want restrict dataset subjects meeting certain criteria. first example, create vector indicating whether subject complete data set variables age, sex weight: data best illustrate function, missing data. can also check whether subjects available data set variables: , can’t see differences subjects data variables. However, lets assume want create subset data restricted participants data least one variables. can use ds.dataFrameSubset conjuncture vector created:","code":"dh.defineCases(   df = \"data\",    vars = c(\"age\", \"sex\", \"weight\"),   type = \"all\",    new_obj = \"data_on_all_vars\") cases_all <- ds.table(\"data_on_all_vars\")$output.list$TABLE_rvar.by.study_counts cases_all ##                 study ## data_on_all_vars alspac   bcg   bib ##               1  129681 12724 68864 ##               NA      0     0     0 dh.defineCases(   df = \"data\",    vars = c(\"age\", \"sex\", \"weight\"),   type = \"any\",    new_obj = \"data_on_any_vars\") cases_any <- ds.table(\"data_on_any_vars\")$output.list$TABLE_rvar.by.study_counts cases_any ##                 study ## data_on_any_vars alspac   bcg   bib ##               1  129681 12724 68864 ##               NA      0     0     0 ds.dataFrameSubset(   df.name = \"data\",    V1.name = \"data_on_all_vars\",    V2.name = \"1\",    Boolean.operator = \"==\",    newobj = \"complete_df\") ds.dim(\"data\") ds.dim(\"complete_df\") ## $`dimensions of data in alspac` ## [1] 129681      6 ##  ## $`dimensions of data in bcg` ## [1] 12724     6 ##  ## $`dimensions of data in bib` ## [1] 68864     6 ##  ## $`dimensions of data in combined studies` ## [1] 211269      6 ##  ## $`dimensions of complete_df in alspac` ## [1] 129681      6 ##  ## $`dimensions of complete_df in bcg` ## [1] 12724     6 ##  ## $`dimensions of complete_df in bib` ## [1] 68864     6 ##  ## $`dimensions of complete_df in combined studies` ## [1] 211269      6"},{"path":[]},{"path":"/articles/ds-helper-main-vignette.html","id":"enabling-auto-complete-functionality-within-r-studio-","dir":"Articles","previous_headings":"Miscellaneous functions","what":"Enabling auto-complete functionality within R Studio.","title":"Descriptive functions","text":"using R studio native R, auto-complete suggestions appear variables within data frame. However, default won’t appear variables within serverside data frame. can get round creating local object structure remote object. run function, autocomplete options data frame “data” now available.","code":"dh.localProxy(df = \"data\", conns = conns)"},{"path":"/articles/ds-helper-main-vignette.html","id":"manually-pooling-estimates-by-meta-analysis","dir":"Articles","previous_headings":"Miscellaneous functions","what":"Manually pooling estimates by meta-analysis","title":"Descriptive functions","text":"time meta-analysis functions DataSHIELD (e.g. ds.glmSLMA) sufficient. However, may sometimes need additional flexibility meta-analysis. example, currently ds.glmSLMA doesn’t return heterogeneity statistics. functions takes vectors coefficients standard errors multiple cohorts meta-analyses . First fit model different cohorts extract coefficients: Now can use object meta-analysis manually: output consists list two elements. first element (“model”) list output metafor. length number variables meta-analysed: second element (“coefficients”) summary table: Finish logging demo server","code":"output <- ds.glmSLMA(   formula = \"weight~age\",    dataName = \"data\",    family = \"gaussian\") meta_analysed <- dh.metaManual(   model = output,   method = \"ML\") str(meta_analysed$model) ## List of 2 ##  $ (Intercept):List of 74 ##   ..$ b           : num [1, 1] 4.91 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr \"intrcpt\" ##   .. .. ..$ : NULL ##   ..$ beta        : num [1, 1] 4.91 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr \"intrcpt\" ##   .. .. ..$ : NULL ##   ..$ se          : num 0.415 ##   ..$ zval        : num 11.8 ##   ..$ pval        : num 3.03e-32 ##   ..$ ci.lb       : num 4.09 ##   ..$ ci.ub       : num 5.72 ##   ..$ vb          : num [1, 1] 0.172 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr \"intrcpt\" ##   .. .. ..$ : chr \"intrcpt\" ##   ..$ tau2        : num 0.516 ##   ..$ se.tau2     : num 0.422 ##   ..$ tau2.fix    : logi FALSE ##   ..$ tau2.f      : num 0.516 ##   ..$ I2          : num 99.9 ##   ..$ H2          : num 994 ##   ..$ R2          : NULL ##   ..$ vt          : num 0.000519 ##   ..$ QE          : num 1753 ##   ..$ QEp         : num 0 ##   ..$ QM          : num 140 ##   ..$ QMdf        : int [1:2] 1 NA ##   ..$ QMp         : num 3.03e-32 ##   ..$ k           : int 3 ##   ..$ k.f         : int 3 ##   ..$ k.eff       : int 3 ##   ..$ k.all       : int 3 ##   ..$ p           : int 1 ##   ..$ p.eff       : int 1 ##   ..$ parms       : num 2 ##   ..$ int.only    : logi TRUE ##   ..$ int.incl    : logi TRUE ##   ..$ intercept   : logi TRUE ##   ..$ allvipos    : logi TRUE ##   ..$ coef.na     : Named logi FALSE ##   .. ..- attr(*, \"names\")= chr \"X\" ##   ..$ yi          : Named num [1:3] 4.02 5.78 4.92 ##   .. ..- attr(*, \"names\")= chr [1:3] \"betas study 1\" \"betas study 2\" \"betas study 3\" ##   .. ..- attr(*, \"measure\")= chr \"GEN\" ##   .. ..- attr(*, \"slab\")= int [1:3] 1 2 3 ##   ..$ vi          : Named num [1:3] 0.000819 0.000964 0.000108 ##   .. ..- attr(*, \"names\")= chr [1:3] \"ses study 1\" \"ses study 2\" \"ses study 3\" ##   ..$ X           : num [1:3, 1] 1 1 1 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : NULL ##   .. .. ..$ : chr \"intrcpt\" ##   ..$ weights     : NULL ##   ..$ yi.f        : Named num [1:3] 4.02 5.78 4.92 ##   .. ..- attr(*, \"names\")= chr [1:3] \"betas study 1\" \"betas study 2\" \"betas study 3\" ##   .. ..- attr(*, \"measure\")= chr \"GEN\" ##   .. ..- attr(*, \"slab\")= int [1:3] 1 2 3 ##   ..$ vi.f        : Named num [1:3] 0.000819 0.000964 0.000108 ##   .. ..- attr(*, \"names\")= chr [1:3] \"ses study 1\" \"ses study 2\" \"ses study 3\" ##   ..$ X.f         : num [1:3, 1] 1 1 1 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : NULL ##   .. .. ..$ : chr \"intrcpt\" ##   ..$ weights.f   : NULL ##   ..$ M           : num [1:3, 1:3] 0.517 0 0 0 0.517 ... ##   ..$ outdat.f    :List of 8 ##   .. ..$ ai : num NA ##   .. ..$ bi : num NA ##   .. ..$ ci : num NA ##   .. ..$ di : num NA ##   .. ..$ x1i: num NA ##   .. ..$ x2i: num NA ##   .. ..$ t1i: num NA ##   .. ..$ t2i: num NA ##   ..$ ni          : NULL ##   ..$ ni.f        : NULL ##   ..$ ids         : int [1:3] 1 2 3 ##   ..$ not.na      : Named logi [1:3] TRUE TRUE TRUE ##   .. ..- attr(*, \"names\")= chr [1:3] \"betas study 1\" \"betas study 2\" \"betas study 3\" ##   ..$ subset      : NULL ##   ..$ slab        : int [1:3] 1 2 3 ##   ..$ slab.null   : logi TRUE ##   ..$ measure     : chr \"GEN\" ##   ..$ method      : chr \"ML\" ##   ..$ model       : chr \"rma.uni\" ##   ..$ weighted    : logi TRUE ##   ..$ test        : chr \"z\" ##   ..$ dfs         : int NA ##   ..$ ddf         : int NA ##   ..$ s2w         : num 1 ##   ..$ btt         : int 1 ##   ..$ m           : int 1 ##   ..$ digits      : Named num [1:9] 4 4 4 4 4 4 4 4 4 ##   .. ..- attr(*, \"names\")= chr [1:9] \"est\" \"se\" \"test\" \"pval\" ... ##   ..$ level       : num 0.05 ##   ..$ control     : list() ##   ..$ verbose     : logi FALSE ##   ..$ add         : num 0.5 ##   ..$ to          : chr \"only0\" ##   ..$ drop00      : logi FALSE ##   ..$ fit.stats   :'data.frame': 5 obs. of  2 variables: ##   .. ..$ ML  : num [1:5] -3.27 24.21 10.53 8.73 22.53 ##   .. ..$ REML: num [1:5] -2.68 5.36 9.36 6.74 21.36 ##   ..$ data        :<environment: 0x139378300>  ##   ..$ formula.yi  : NULL ##   ..$ formula.mods: NULL ##   ..$ version     :Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 4 2 0 ##   ..$ call        : language rma(yi = model$betamatrix.valid[x, ], sei = model$sematrix.valid[x, ], method = \"ML\") ##   ..$ time        : num 0.003 ##   ..- attr(*, \"class\")= chr [1:2] \"rma.uni\" \"rma\" ##  $ age        :List of 74 ##   ..$ b           : num [1, 1] 3.14 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr \"intrcpt\" ##   .. .. ..$ : NULL ##   ..$ beta        : num [1, 1] 3.14 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr \"intrcpt\" ##   .. .. ..$ : NULL ##   ..$ se          : num 0.133 ##   ..$ zval        : num 23.6 ##   ..$ pval        : num 6.46e-123 ##   ..$ ci.lb       : num 2.88 ##   ..$ ci.ub       : num 3.41 ##   ..$ vb          : num [1, 1] 0.0178 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr \"intrcpt\" ##   .. .. ..$ : chr \"intrcpt\" ##   ..$ tau2        : num 0.0533 ##   ..$ se.tau2     : num 0.0435 ##   ..$ tau2.fix    : logi FALSE ##   ..$ tau2.f      : num 0.0533 ##   ..$ I2          : num 99.9 ##   ..$ H2          : num 1915 ##   ..$ R2          : NULL ##   ..$ vt          : num 2.78e-05 ##   ..$ QE          : num 4454 ##   ..$ QEp         : num 0 ##   ..$ QM          : num 556 ##   ..$ QMdf        : int [1:2] 1 NA ##   ..$ QMp         : num 6.46e-123 ##   ..$ k           : int 3 ##   ..$ k.f         : int 3 ##   ..$ k.eff       : int 3 ##   ..$ k.all       : int 3 ##   ..$ p           : int 1 ##   ..$ p.eff       : int 1 ##   ..$ parms       : num 2 ##   ..$ int.only    : logi TRUE ##   ..$ int.incl    : logi TRUE ##   ..$ intercept   : logi TRUE ##   ..$ allvipos    : logi TRUE ##   ..$ coef.na     : Named logi FALSE ##   .. ..- attr(*, \"names\")= chr \"X\" ##   ..$ yi          : Named num [1:3] 3.44 2.87 3.12 ##   .. ..- attr(*, \"names\")= chr [1:3] \"betas study 1\" \"betas study 2\" \"betas study 3\" ##   .. ..- attr(*, \"measure\")= chr \"GEN\" ##   .. ..- attr(*, \"slab\")= int [1:3] 1 2 3 ##   ..$ vi          : Named num [1:3] 1.19e-05 1.41e-04 2.07e-05 ##   .. ..- attr(*, \"names\")= chr [1:3] \"ses study 1\" \"ses study 2\" \"ses study 3\" ##   ..$ X           : num [1:3, 1] 1 1 1 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : NULL ##   .. .. ..$ : chr \"intrcpt\" ##   ..$ weights     : NULL ##   ..$ yi.f        : Named num [1:3] 3.44 2.87 3.12 ##   .. ..- attr(*, \"names\")= chr [1:3] \"betas study 1\" \"betas study 2\" \"betas study 3\" ##   .. ..- attr(*, \"measure\")= chr \"GEN\" ##   .. ..- attr(*, \"slab\")= int [1:3] 1 2 3 ##   ..$ vi.f        : Named num [1:3] 1.19e-05 1.41e-04 2.07e-05 ##   .. ..- attr(*, \"names\")= chr [1:3] \"ses study 1\" \"ses study 2\" \"ses study 3\" ##   ..$ X.f         : num [1:3, 1] 1 1 1 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : NULL ##   .. .. ..$ : chr \"intrcpt\" ##   ..$ weights.f   : NULL ##   ..$ M           : num [1:3, 1:3] 0.0533 0 0 0 0.0534 ... ##   ..$ outdat.f    :List of 8 ##   .. ..$ ai : num NA ##   .. ..$ bi : num NA ##   .. ..$ ci : num NA ##   .. ..$ di : num NA ##   .. ..$ x1i: num NA ##   .. ..$ x2i: num NA ##   .. ..$ t1i: num NA ##   .. ..$ t2i: num NA ##   ..$ ni          : NULL ##   ..$ ni.f        : NULL ##   ..$ ids         : int [1:3] 1 2 3 ##   ..$ not.na      : Named logi [1:3] TRUE TRUE TRUE ##   .. ..- attr(*, \"names\")= chr [1:3] \"betas study 1\" \"betas study 2\" \"betas study 3\" ##   ..$ subset      : NULL ##   ..$ slab        : int [1:3] 1 2 3 ##   ..$ slab.null   : logi TRUE ##   ..$ measure     : chr \"GEN\" ##   ..$ method      : chr \"ML\" ##   ..$ model       : chr \"rma.uni\" ##   ..$ weighted    : logi TRUE ##   ..$ test        : chr \"z\" ##   ..$ dfs         : int NA ##   ..$ ddf         : int NA ##   ..$ s2w         : num 1 ##   ..$ btt         : int 1 ##   ..$ m           : int 1 ##   ..$ digits      : Named num [1:9] 4 4 4 4 4 4 4 4 4 ##   .. ..- attr(*, \"names\")= chr [1:9] \"est\" \"se\" \"test\" \"pval\" ... ##   ..$ level       : num 0.05 ##   ..$ control     : list() ##   ..$ verbose     : logi FALSE ##   ..$ add         : num 0.5 ##   ..$ to          : chr \"only0\" ##   ..$ drop00      : logi FALSE ##   ..$ fit.stats   :'data.frame': 5 obs. of  2 variables: ##   .. ..$ ML  : num [1:5] 0.14 25.2 3.72 1.92 15.72 ##   .. ..$ REML: num [1:5] -0.407 0.814 4.814 2.201 16.814 ##   ..$ data        :<environment: 0x12971ce00>  ##   ..$ formula.yi  : NULL ##   ..$ formula.mods: NULL ##   ..$ version     :Classes 'package_version', 'numeric_version'  hidden list of 1 ##   .. ..$ : int [1:3] 4 2 0 ##   ..$ call        : language rma(yi = model$betamatrix.valid[x, ], sei = model$sematrix.valid[x, ], method = \"ML\") ##   ..$ time        : num 0.003 ##   ..- attr(*, \"class\")= chr [1:2] \"rma.uni\" \"rma\" meta_analysed$coefs ## # A tibble: 2 × 3 ##   term         coef    se ##   <chr>       <dbl> <dbl> ## 1 (Intercept)  4.91 0.415 ## 2 age          3.14 0.133 datashield.logout(conns)"},{"path":[]},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"overview","dir":"Articles","previous_headings":"Introduction","what":"Overview","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"tutorial demonstrate model trajectories DataSHIELD using repeated measures data multiple cohorts. tutorial draws following papers/tutorials: Hughes, R., Tilling, K. & Lawlor, D. Combining longitudinal data different cohorts examine life-course trajectory. Preprint available medrxiv: https://doi.org/10.1101/2020.11.24.20237669 Tilling K, Macdonald-Wallis C, Lawlor DA, Hughes RA, Howe LD. Modelling childhood growth using fractional polynomials linear splines. Ann Nutr Metab. 2014;65(2-3):129-38. https://doi.org/10.1159/000362695. Centre Multilevel Modelling online course. http://www.bristol.ac.uk/cmm/learning/online-course/ use simulated data replicate part analysis Hughes et al. cited . helpful read tutorial conjuncture paper. Please note methods used Hughes et al. available DataSHIELD. Currently possible 1-stage meta-analysis mixed effects models. pipeline tutorial extended methods become available. spline models!","code":""},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"data","dir":"Articles","previous_headings":"Introduction","what":"Data","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"working simulated repeated measures data four cohorts: () Alspac, (ii) BCG, (iii) Born Bradford & (iv) Probit.","code":""},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"aims-of-the-analysis","dir":"Articles","previous_headings":"Introduction","what":"Aims of the analysis","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"research aims today : model child weight trajectories time four cohorts model sex differences weight trajectories combine trajectories 2-stage meta-analysis Let’s get started.","code":""},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"installing-and-loading-packages","dir":"Articles","previous_headings":"","what":"Installing and loading packages","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"First need install packages used tutorial. Even previously installed worth ensure latest versions. prompted update packages, select option ‘none’. First install package ‘remotes’ contains function ‘install_github’. Now load packages. couple things note: use lot tidyverse packages find efficient make code readable. syntax unclear just ask! also use number functions package called dsHelper. written Sido Haakma make analysis DataSHIELD straightforward. problems functions just let us know.","code":"#install.packages(\"remotes\") library(remotes) #install_github(\"datashield/DSI\") #install_github(\"datashield/dsBaseClient\") #install_github(\"lifecycle-project/ds-helper\", ref = \"dev\") #install.packages(\"DSMolgenisArmadillo\") #install.packages(\"tidyverse\") library(dsBaseClient) library(DSI) library(DSMolgenisArmadillo) library(dsHelper) library(tidyverse)"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"logging-in-and-assigning-data","dir":"Articles","previous_headings":"","what":"Logging in and assigning data","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"simulated data held remote server. access , first request ‘token’ contains login details. use login assign data. can check worked. see cohort one dataframe called “data”, contains 7 variables. wont using variables today, however want come back use data try complicated models ’ll keep online.","code":"url <- \"https://armadillo-demo.molgenis.net/\" token <- armadillo.get_token(url)    builder <- DSI::newDSLoginBuilder()  builder$append( server = \"alspac\", url = url, table = \"trajectories/data/alspac\", token = token, driver = \"ArmadilloDriver\",  profile = \"xenon\")  builder$append( server = \"bcg\", url = url, table = \"trajectories/data/bcg\", token = token, driver = \"ArmadilloDriver\",  profile = \"xenon\")  builder$append( server = \"bib\", url = url, table = \"trajectories/data/bib\", token = token, driver = \"ArmadilloDriver\",  profile = \"xenon\")  builder$append( server = \"probit\", url = url, table = \"trajectories/data/probit\", token = token, driver = \"ArmadilloDriver\",  profile = \"xenon\")  logindata <- builder$build()  conns <- DSI::datashield.login(logins = logindata, assign = T, symbol = \"data\") ds.summary(\"data\") ## $alspac ## $alspac$class ## [1] \"data.frame\" ##  ## $alspac$`number of rows` ## [1] 129681 ##  ## $alspac$`number of columns` ## [1] 7 ##  ## $alspac$`variables held` ## [1] \"id\"                 \"age\"                \"sex\"                \"ethnicity\"          \"father_socialclass\" \"mother_education\"   ## [7] \"weight\"             ##  ##  ## $bcg ## $bcg$class ## [1] \"data.frame\" ##  ## $bcg$`number of rows` ## [1] 12724 ##  ## $bcg$`number of columns` ## [1] 7 ##  ## $bcg$`variables held` ## [1] \"id\"                 \"age\"                \"sex\"                \"ethnicity\"          \"father_socialclass\" \"mother_education\"   ## [7] \"weight\"             ##  ##  ## $bib ## $bib$class ## [1] \"data.frame\" ##  ## $bib$`number of rows` ## [1] 68864 ##  ## $bib$`number of columns` ## [1] 7 ##  ## $bib$`variables held` ## [1] \"id\"                 \"age\"                \"sex\"                \"ethnicity\"          \"father_socialclass\" \"mother_education\"   ## [7] \"weight\"             ##  ##  ## $probit ## $probit$class ## [1] \"data.frame\" ##  ## $probit$`number of rows` ## [1] 191224 ##  ## $probit$`number of columns` ## [1] 7 ##  ## $probit$`variables held` ## [1] \"id\"                 \"age\"                \"sex\"                \"ethnicity\"          \"father_socialclass\" \"mother_education\"   ## [7] \"weight\""},{"path":[]},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"scatter-plots-of-child-weight-by-age","dir":"Articles","previous_headings":"Part 1: Visualising the data","what":"Scatter plots of child weight by age","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"Let’s start looking repeated measures weight data cohort. can make scatter plots age x-axis weight y-axis. Note values see anonymised - non-disclosive approximation original values. initial thoughts data?","code":"ds.scatterPlot(x = \"data$age\", y = \"data$weight\") ## [1] \"Split plot created\""},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"mean-observed-weight-by-age","dir":"Articles","previous_headings":"Part 1: Visualising the data","what":"Mean observed weight by age","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"Another way visualise weight data split child age yearly intervals, plot mean y-axis age x-axis (see Figure 2 Hughes et al.). First need calculate mean values weight yearly age band: Now values locally, can use r package plot . like use ggplot: Q: Looking two plots, initial thoughts pattern weight change time?","code":"mean_age <- dh.meanByGroup(     df = \"data\",      outcome = \"weight\",      group_var = \"age\") mean_age %>% print(n = Inf) ## # A tibble: 55 × 3 ##    cohort   age  mean ##    <chr>  <dbl> <dbl> ##  1 alspac     0  4.64 ##  2 alspac     1  8.78 ##  3 alspac     2 12.8  ##  4 alspac     3 16.1  ##  5 alspac     4 17.0  ##  6 alspac     5 18.4  ##  7 alspac     6 20.3  ##  8 alspac     7 24.3  ##  9 alspac     8 26.5  ## 10 alspac     9 30.5  ## 11 alspac    10 35.1  ## 12 alspac    11 38.8  ## 13 alspac    12 43.6  ## 14 alspac    13 49.3  ## 15 alspac    14 54.6  ## 16 alspac    15 61.3  ## 17 alspac    16 63.5  ## 18 alspac    17 67.0  ## 19 alspac    18 67.7  ## 20 alspac    19 70.8  ## 21 alspac    20 71.8  ## 22 bcg        0  5.11 ## 23 bcg        1  8.88 ## 24 bcg        2 13.3  ## 25 bcg        3 15.4  ## 26 bcg        4 16.4  ## 27 bcg        5 18.6  ## 28 bib        0  4.46 ## 29 bib        1  8.11 ## 30 bib        2 13.3  ## 31 bib        3 16.0  ## 32 bib        4 17.1  ## 33 bib        5 18.7  ## 34 bib        6 22.4  ## 35 bib        7 27.8  ## 36 probit     0  4.98 ## 37 probit     1  8.66 ## 38 probit     2 14.0  ## 39 probit     3 16.4  ## 40 probit     4 16.8  ## 41 probit     5 17.8  ## 42 probit     6 20.8  ## 43 probit     7 23.6  ## 44 probit     8 28.0  ## 45 probit     9 34.6  ## 46 probit    10 36.1  ## 47 probit    11 39.8  ## 48 probit    12 42.1  ## 49 probit    13 47.1  ## 50 probit    14 54.0  ## 51 probit    15 60.1  ## 52 probit    16 62.4  ## 53 probit    17 63.2  ## 54 probit    18 61.6  ## 55 probit    19 61.0 palette <- c(\"#264653\", \"#2a9d8f\", \"#E9C46A\", \"#F4A261\", \"#E76F51\")  mean_age.plot <- ggplot() +    geom_line(data = mean_age, aes(x = age, y = mean, colour = cohort), linewidth = 0.8) +   scale_y_continuous(limit = c(0, 80), breaks = seq(0, 80, 20), expand = c(0, 0)) +   xlab(\"Child age\") +   ylab(\"Observed weight (KG)\") +   scale_colour_manual(values = palette) mean_age.plot"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"describing-the-exposures","dir":"Articles","previous_headings":"Part 1: Visualising the data","what":"Describing the exposures","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"DataSHIELD contains functions ds.summary ds.table can used describe continuous categorical variables. However, output little tricky work . Instead can use function ‘dh.getStats’ extract descriptives usable format. gives us list two elements corresponding continuous categorical variables. didn’t request stats continuous variables, first list empty.","code":"stats <- dh.getStats(     df = \"data\",      vars = \"sex\") stats ## $categorical ## # A tibble: 0 × 10 ## # ℹ 10 variables: variable <chr>, cohort <chr>, category <chr>, value <dbl>, cohort_n <int>, valid_n <dbl>, missing_n <dbl>, perc_valid <dbl>, ## #   perc_missing <dbl>, perc_total <dbl> ##  ## $continuous ## # A tibble: 5 × 15 ##   variable cohort    mean std.dev perc_5 perc_10 perc_25 perc_50 perc_75 perc_90 perc_95 valid_n cohort_n missing_n missing_perc ##   <chr>    <chr>    <dbl>   <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>    <dbl>     <dbl>        <dbl> ## 1 sex      alspac    0.49     0.5      0       0       0       0       1       1       1  129681   129681         0            0 ## 2 sex      bcg       0.48     0.5      0       0       0       0       1       1       1   12724    12724         0            0 ## 3 sex      bib       0.49     0.5      0       0       0       0       1       1       1   68864    68864         0            0 ## 4 sex      probit    0.48     0.5      0       0       0       0       1       1       1  191224   191224         0            0 ## 5 sex      combined  0.49     0.5      0       0       0       0       1       1       1  402493   402493         0            0"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"some-more-descriptives-that-are-useful-to-have","dir":"Articles","previous_headings":"Part 1: Visualising the data","what":"Some more descriptives that are useful to have","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"bits information useful report: Total number observations Total number participants Min max age participants Median number measurements per individual can use function dh.getRmStats extract info. Note min max ages based 5th 95th percentiles DataSHIELD doesn’t return true minimum maximums due disclosure issues.","code":"rm_stats <- dh.getRmStats(     df = \"data\",     outcome = \"weight\",     id_var = \"id\",      age_var = \"age\") rm_stats ## # A tibble: 5 × 8 ##   cohort   min_age max_age  n_obs n_participants n_meas_5 n_meas_med n_meas_95 ##   <chr>      <dbl>   <dbl>  <dbl>          <dbl>    <dbl>      <dbl>     <dbl> ## 1 alspac         0   15.7  129681          14216     6          9         13   ## 2 bcg            0    4.99  12724            951    12         14         14   ## 3 bib            0    4.98  68864          13445     3          5          8   ## 4 probit         0   15.9  191224          17046     9         11         14   ## 5 combined       0   13.6  402493          45658     6.36       8.67      11.9"},{"path":[]},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"trajectory-models-prep","dir":"Articles","previous_headings":"Part 2: Fitting a simple linear trajectory","what":"Trajectory models: prep","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"can get started, need make sure id variable integer. don’t, breaks. First create new object integer version ID. join back main dataframe.","code":"ds.asInteger(     x.name = \"data$id\",      newobj = \"id_int\")  ds.dataFrame(     x = c(\"data$id\", \"data$age\", \"data$sex\", \"data$ethnicity\",            \"data$father_socialclass\", \"data$mother_education\", \"data$weight\",           \"id_int\"),     stringsAsFactors = F,     newobj = \"data\")"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"specifying-the-model","dir":"Articles","previous_headings":"Part 2: Fitting a simple linear trajectory","what":"Specifying the model","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"First fit model weight predicted four terms: intercept (1), age, sex interaction age sex. terms ‘fixed effects’, comprise first half formula . specified way write formula standard regression model. second half formula specify random effects. provide information believe data clustered. variable right vertical line ID variable. specifies want treat invidual separate cluster, believe measurements correlated. plausible hypothesis: example height lot higher average age 5, likely also higher average age 10. can describe 2-level clustering, weight measurements (level 1) clustered within individuals (level 2). variables left vertical line specify extra parameters want estimate individual. put another way, specifies parameters allow vary individual. just specify “1”, addition calculating overall intercept, also calculate intercept individual. provides us information variability individuals starting weight. called random intercept model. specifed “1 + age”, addition calculate separate slope individual. provide us information gradient trajectory varies individuals. called random slope model. start random intercept model. Understand difficult bit; fitting model straightfoward:","code":"model1.fit <- ds.lmerSLMA(     dataName = \"data\",   formula = \"weight ~ 1 + age + sex + age*sex + (1|id_int)\",    datasources = conns) model1.fit$output.summary ## $study1 ## Linear mixed model fit by REML ['lmerMod'] ## Formula: weight ~ 1 + age + sex + age * sex + (1 | id_int) ##    Data: dataDF ## Weights: weights.to.use ##  Offset: offset.to.use ## Control: control.obj ##  ## REML criterion at convergence: 839458.6 ##  ## Scaled residuals:  ##    Min     1Q Median     3Q    Max  ##     NA     NA     NA     NA     NA  ##  ## Random effects: ##  Groups   Name        Variance Std.Dev. ##  id_int   (Intercept) 14.77    3.843    ##  Residual             31.68    5.628    ## Number of obs: 129681, groups:  id_int, 14216 ##  ## Fixed effects: ##              Estimate Std. Error t value ## (Intercept)  3.869135   0.056184  68.866 ## age          3.534366   0.004078 866.797 ## sex          0.336620   0.080317   4.191 ## age:sex     -0.200629   0.005789 -34.655 ##  ## Correlation of Fixed Effects: ##         (Intr) age    sex    ## age     -0.445               ## sex     -0.700  0.311        ## age:sex  0.313 -0.704 -0.443 ##  ## $study2 ## Linear mixed model fit by REML ['lmerMod'] ## Formula: weight ~ 1 + age + sex + age * sex + (1 | id_int) ##    Data: dataDF ## Weights: weights.to.use ##  Offset: offset.to.use ## Control: control.obj ##  ## REML criterion at convergence: 54369.4 ##  ## Scaled residuals:  ##    Min     1Q Median     3Q    Max  ##     NA     NA     NA     NA     NA  ##  ## Random effects: ##  Groups   Name        Variance Std.Dev. ##  id_int   (Intercept) 1.250    1.118    ##  Residual             3.692    1.921    ## Number of obs: 12724, groups:  id_int, 951 ##  ## Fixed effects: ##             Estimate Std. Error t value ## (Intercept)  6.03409    0.06151  98.097 ## age          2.85790    0.01411 202.581 ## sex         -0.54661    0.09028  -6.055 ## age:sex      0.03661    0.02049   1.787 ##  ## Correlation of Fixed Effects: ##         (Intr) age    sex    ## age     -0.455               ## sex     -0.681  0.310        ## age:sex  0.313 -0.688 -0.456 ##  ## $study3 ## Linear mixed model fit by REML ['lmerMod'] ## Formula: weight ~ 1 + age + sex + age * sex + (1 | id_int) ##    Data: dataDF ## Weights: weights.to.use ##  Offset: offset.to.use ## Control: control.obj ##  ## REML criterion at convergence: 292805.1 ##  ## Scaled residuals:  ##    Min     1Q Median     3Q    Max  ##     NA     NA     NA     NA     NA  ##  ## Random effects: ##  Groups   Name        Variance Std.Dev. ##  id_int   (Intercept) 0.6142   0.7837   ##  Residual             3.6480   1.9100   ## Number of obs: 68864, groups:  id_int, 13445 ##  ## Fixed effects: ##              Estimate Std. Error t value ## (Intercept)  5.089372   0.016491 308.613 ## age          3.119718   0.005986 521.136 ## sex         -0.394888   0.023685 -16.672 ## age:sex      0.004995   0.008556   0.584 ##  ## Correlation of Fixed Effects: ##         (Intr) age    sex    ## age     -0.528               ## sex     -0.696  0.368        ## age:sex  0.369 -0.700 -0.529 ##  ## $study4 ## Linear mixed model fit by REML ['lmerMod'] ## Formula: weight ~ 1 + age + sex + age * sex + (1 | id_int) ##    Data: dataDF ## Weights: weights.to.use ##  Offset: offset.to.use ## Control: control.obj ##  ## REML criterion at convergence: 1138299 ##  ## Scaled residuals:  ##    Min     1Q Median     3Q    Max  ##     NA     NA     NA     NA     NA  ##  ## Random effects: ##  Groups   Name        Variance Std.Dev. ##  id_int   (Intercept)  3.402   1.844    ##  Residual             20.521   4.530    ## Number of obs: 191224, groups:  id_int, 17046 ##  ## Fixed effects: ##              Estimate Std. Error  t value ## (Intercept)  4.689392   0.026376  177.793 ## age          3.455656   0.003041 1136.282 ## sex          0.013923   0.038018    0.366 ## age:sex     -0.240527   0.004382  -54.889 ##  ## Correlation of Fixed Effects: ##         (Intr) age    sex    ## age     -0.381               ## sex     -0.694  0.264        ## age:sex  0.264 -0.694 -0.381 ##  ## $input.beta.matrix.for.SLMA ##             betas study 1 betas study 2 betas study 3 betas study 4 ## (Intercept)     3.8691347    6.03408780   5.089372058    4.68939189 ## age             3.5343657    2.85790465   3.119717700    3.45565555 ## sex             0.3366204   -0.54660715  -0.394887544    0.01392347 ## age:sex        -0.2006292    0.03661021   0.004995405   -0.24052747 ##  ## $input.se.matrix.for.SLMA ##             ses study 1 ses study 2 ses study 3 ses study 4 ## (Intercept) 0.056183657  0.06151162 0.016491091 0.026375527 ## age         0.004077501  0.01410748 0.005986375 0.003041196 ## sex         0.080317421  0.09027731 0.023685373 0.038017878 ## age:sex     0.005789246  0.02049084 0.008556005 0.004382080"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"exploring-the-output","dir":"Articles","previous_headings":"Part 2: Fitting a simple linear trajectory","what":"Exploring the output","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"can see coefficients fixed random parts model directly model object. Fixed effects coefficients cohort : pooled estimates : details random effects :","code":"model1.fit$betamatrix.valid ##             betas study 1 betas study 2 betas study 3 betas study 4 ## (Intercept)     3.8691347    6.03408780   5.089372058    4.68939189 ## age             3.5343657    2.85790465   3.119717700    3.45565555 ## sex             0.3366204   -0.54660715  -0.394887544    0.01392347 ## age:sex        -0.2006292    0.03661021   0.004995405   -0.24052747 model1.fit$SLMA.pooled.ests.matrix ##              pooled.ML      se.ML pooled.REML    se.REML  pooled.FE       se.FE ## (Intercept)  4.9201754 0.38859060   4.9202557 0.44896972  4.9643913 0.013250416 ## age          3.2421628 0.13538495   3.2420998 0.15635197  3.4176657 0.002229407 ## sex         -0.1477761 0.17066919  -0.1477464 0.19787562 -0.2576757 0.019061879 ## age:sex     -0.1008701 0.06092812  -0.1006258 0.07037899 -0.1873971 0.003195114 model1.fit$output.summary$study1$varcor ##  Groups   Name        Std.Dev. ##  id_int   (Intercept) 3.8426   ##  Residual             5.6282"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"a-neater-way","dir":"Articles","previous_headings":"Part 2: Fitting a simple linear trajectory","what":"A neater way","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"find objects little fiddly work (may ). can also use dsHelper function extract coefficients. Let’s explore detail","code":"model1.coef <- dh.lmTab(     model = model1.fit,      type = \"lmer_slma\",      coh_names = names(conns),      ci_format = \"separate\",      direction = \"wide\")"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"fixed-effects","dir":"Articles","previous_headings":"Part 2: Fitting a simple linear trajectory > A neater way","what":"Fixed effects","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"fixed effects analogous coefficients linear regression model. use dh.lmTab allows us manipulate output easily. example might want split fixed effects cohort: might want just select pooled results:","code":"model1.coef$fixed ## # A tibble: 20 × 9 ##    cohort   variable    est    se pvalue  n_obs n_coh lowci uppci ##    <chr>    <chr>     <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> ##  1 alspac   intercept  3.87  0.06     NA 129681     1  3.76  3.98 ##  2 alspac   age        3.53  0        NA 129681     1  3.53  3.54 ##  3 alspac   sex        0.34  0.08     NA 129681     1  0.18  0.49 ##  4 alspac   age:sex   -0.2   0.01     NA 129681     1 -0.21 -0.19 ##  5 bcg      intercept  6.03  0.06     NA  12724     1  5.91  6.15 ##  6 bcg      age        2.86  0.01     NA  12724     1  2.83  2.89 ##  7 bcg      sex       -0.55  0.09     NA  12724     1 -0.72 -0.37 ##  8 bcg      age:sex    0.04  0.02     NA  12724     1  0     0.08 ##  9 bib      intercept  5.09  0.02     NA  68864     1  5.06  5.12 ## 10 bib      age        3.12  0.01     NA  68864     1  3.11  3.13 ## 11 bib      sex       -0.39  0.02     NA  68864     1 -0.44 -0.35 ## 12 bib      age:sex    0     0.01     NA  68864     1 -0.01  0.02 ## 13 probit   intercept  4.69  0.03     NA 191224     1  4.64  4.74 ## 14 probit   age        3.46  0        NA 191224     1  3.45  3.46 ## 15 probit   sex        0.01  0.04     NA 191224     1 -0.06  0.09 ## 16 probit   age:sex   -0.24  0        NA 191224     1 -0.25 -0.23 ## 17 combined intercept  4.92  0.39     NA 402493     4  4.16  5.68 ## 18 combined age        3.24  0.14     NA 402493     4  2.98  3.51 ## 19 combined sex       -0.15  0.17     NA 402493     4 -0.48  0.19 ## 20 combined age:sex   -0.1   0.06     NA 402493     4 -0.22  0.02 model1.coef$fixed %>% group_by(cohort) %>% group_split() ## <list_of< ##   tbl_df< ##     cohort  : character ##     variable: character ##     est     : double ##     se      : double ##     pvalue  : double ##     n_obs   : double ##     n_coh   : double ##     lowci   : double ##     uppci   : double ##   > ## >[5]> ## [[1]] ## # A tibble: 4 × 9 ##   cohort variable    est    se pvalue  n_obs n_coh lowci uppci ##   <chr>  <chr>     <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> ## 1 alspac intercept  3.87  0.06     NA 129681     1  3.76  3.98 ## 2 alspac age        3.53  0        NA 129681     1  3.53  3.54 ## 3 alspac sex        0.34  0.08     NA 129681     1  0.18  0.49 ## 4 alspac age:sex   -0.2   0.01     NA 129681     1 -0.21 -0.19 ##  ## [[2]] ## # A tibble: 4 × 9 ##   cohort variable    est    se pvalue n_obs n_coh lowci uppci ##   <chr>  <chr>     <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> ## 1 bcg    intercept  6.03  0.06     NA 12724     1  5.91  6.15 ## 2 bcg    age        2.86  0.01     NA 12724     1  2.83  2.89 ## 3 bcg    sex       -0.55  0.09     NA 12724     1 -0.72 -0.37 ## 4 bcg    age:sex    0.04  0.02     NA 12724     1  0     0.08 ##  ## [[3]] ## # A tibble: 4 × 9 ##   cohort variable    est    se pvalue n_obs n_coh lowci uppci ##   <chr>  <chr>     <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> ## 1 bib    intercept  5.09  0.02     NA 68864     1  5.06  5.12 ## 2 bib    age        3.12  0.01     NA 68864     1  3.11  3.13 ## 3 bib    sex       -0.39  0.02     NA 68864     1 -0.44 -0.35 ## 4 bib    age:sex    0     0.01     NA 68864     1 -0.01  0.02 ##  ## [[4]] ## # A tibble: 4 × 9 ##   cohort   variable    est    se pvalue  n_obs n_coh lowci uppci ##   <chr>    <chr>     <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> ## 1 combined intercept  4.92  0.39     NA 402493     4  4.16  5.68 ## 2 combined age        3.24  0.14     NA 402493     4  2.98  3.51 ## 3 combined sex       -0.15  0.17     NA 402493     4 -0.48  0.19 ## 4 combined age:sex   -0.1   0.06     NA 402493     4 -0.22  0.02 ##  ## [[5]] ## # A tibble: 4 × 9 ##   cohort variable    est    se pvalue  n_obs n_coh lowci uppci ##   <chr>  <chr>     <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> ## 1 probit intercept  4.69  0.03     NA 191224     1  4.64  4.74 ## 2 probit age        3.46  0        NA 191224     1  3.45  3.46 ## 3 probit sex        0.01  0.04     NA 191224     1 -0.06  0.09 ## 4 probit age:sex   -0.24  0        NA 191224     1 -0.25 -0.23 model1.coef$fixed %>% dplyr::filter(cohort == \"combined\") ## # A tibble: 4 × 9 ##   cohort   variable    est    se pvalue  n_obs n_coh lowci uppci ##   <chr>    <chr>     <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> ## 1 combined intercept  4.92  0.39     NA 402493     4  4.16  5.68 ## 2 combined age        3.24  0.14     NA 402493     4  2.98  3.51 ## 3 combined sex       -0.15  0.17     NA 402493     4 -0.48  0.19 ## 4 combined age:sex   -0.1   0.06     NA 402493     4 -0.22  0.02"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"random-effects","dir":"Articles","previous_headings":"Part 2: Fitting a simple linear trajectory > A neater way","what":"Random effects","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"model fit, group (level 2) residuals calculated subject. represent difference interecept subject mean intercept sample. However, returned DataSHIELD disclosive. Instead can view standard deviation residuals: take ALSPAC example, overall (mean) intercept 3.87, standard deviation 3.84. indicates considerable variability individual intercepts. specified one random effect (e.g. slope) also displayed . can also see standard deviation residual error, ie difference observed values predicted values within subject.","code":"model1.coef$random ## # A tibble: 8 × 5 ##   cohort group    var1      var2  stddev ##   <chr>  <chr>    <chr>     <chr>  <dbl> ## 1 alspac id_int   intercept <NA>    3.84 ## 2 alspac Residual <NA>      <NA>    5.63 ## 3 bcg    id_int   intercept <NA>    1.12 ## 4 bcg    Residual <NA>      <NA>    1.92 ## 5 bib    id_int   intercept <NA>    0.78 ## 6 bib    Residual <NA>      <NA>    1.91 ## 7 probit id_int   intercept <NA>    1.84 ## 8 probit Residual <NA>      <NA>    4.53"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"plotting-the-trajectories","dir":"Articles","previous_headings":"Part 2: Fitting a simple linear trajectory","what":"Plotting the trajectories","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"order plot trajectories, first need get model predicted values weight. order , need create dataframe values fixed effects want predict values weight. names columns new dataframe need correspond names coefficients output . want visualise trajectories males females ages 0 25. reference dataframe, therefore create values age 0 25 0.1 intervals, repeated sex == 0 (males) sex == 1 (females). look object created, values model variables want predict weight: can use reference data model object get predicted values. Note now four columns appended reference data containing predicted values, standard error predictions confidence intervals. Nice, ’re getting . One thing address currently predicted values cohorts ages 0 25. However many cohorts don’t data ages, might want plot beyond data. can trim predicted data available ages. Next set sex factor make plot clearer: also nice able overlay predicted trajectory observed values. Remember earlier made scatter plot using DataSHIELD? can extract anonymised values used plot store local object. allows us build flexible plots. row created object represents anomyised values subject. Now ready plot pooled trajectories. use function “sample_frac” take 1% observed values. can play around value, use many graph becomes unreadable. can also plot trajectories cohort separately: Q: Looking plots, well think model fits data?","code":"new_data_m <- tibble(     age = seq(0, 25, by = 0.1),      \"age:sex\" = age*0,     sex = 0)  new_data_f <- tibble(     age = seq(0, 25, by = 0.11),      \"age:sex\" = age*1,     sex = 1)  pred_data <- bind_rows(new_data_m, new_data_f) pred_data ## # A tibble: 479 × 3 ##      age `age:sex`   sex ##    <dbl>     <dbl> <dbl> ##  1   0           0     0 ##  2   0.1         0     0 ##  3   0.2         0     0 ##  4   0.3         0     0 ##  5   0.4         0     0 ##  6   0.5         0     0 ##  7   0.6         0     0 ##  8   0.7         0     0 ##  9   0.8         0     0 ## 10   0.9         0     0 ## # ℹ 469 more rows plotdata <- dh.predictLmer(     model = model1.fit,     new_data = pred_data,     coh_names = names(conns)) plotdata ## # A tibble: 2,395 × 9 ##    cohort intercept   age `age:sex`   sex predicted     se low_ci upper_ci ##    <chr>      <dbl> <dbl>     <dbl> <dbl>     <dbl>  <dbl>  <dbl>    <dbl> ##  1 alspac         1   0           0     0      3.87 0.0562   3.76     3.98 ##  2 alspac         1   0.1         0     0      4.22 0.0560   4.11     4.33 ##  3 alspac         1   0.2         0     0      4.58 0.0558   4.47     4.69 ##  4 alspac         1   0.3         0     0      4.93 0.0557   4.82     5.04 ##  5 alspac         1   0.4         0     0      5.28 0.0555   5.17     5.39 ##  6 alspac         1   0.5         0     0      5.64 0.0553   5.53     5.74 ##  7 alspac         1   0.6         0     0      5.99 0.0551   5.88     6.10 ##  8 alspac         1   0.7         0     0      6.34 0.0550   6.23     6.45 ##  9 alspac         1   0.8         0     0      6.69 0.0548   6.59     6.80 ## 10 alspac         1   0.9         0     0      7.05 0.0547   6.94     7.15 ## # ℹ 2,385 more rows plot_trim <- dh.trimPredData(     pred = plotdata,     coh_names = c(\"alspac\", \"bcg\", \"bib\", \"probit\", \"combined\"),     min = rep(0, 5),      max = c(20, 5, 5, 20, 20)) plot_trim ## # A tibble: 1,343 × 9 ##    cohort intercept   age `age:sex`   sex predicted     se low_ci upper_ci ##    <chr>      <dbl> <dbl>     <dbl> <dbl>     <dbl>  <dbl>  <dbl>    <dbl> ##  1 alspac         1   0           0     0      3.87 0.0562   3.76     3.98 ##  2 alspac         1   0.1         0     0      4.22 0.0560   4.11     4.33 ##  3 alspac         1   0.2         0     0      4.58 0.0558   4.47     4.69 ##  4 alspac         1   0.3         0     0      4.93 0.0557   4.82     5.04 ##  5 alspac         1   0.4         0     0      5.28 0.0555   5.17     5.39 ##  6 alspac         1   0.5         0     0      5.64 0.0553   5.53     5.74 ##  7 alspac         1   0.6         0     0      5.99 0.0551   5.88     6.10 ##  8 alspac         1   0.7         0     0      6.34 0.0550   6.23     6.45 ##  9 alspac         1   0.8         0     0      6.69 0.0548   6.59     6.80 ## 10 alspac         1   0.9         0     0      7.05 0.0547   6.94     7.15 ## # ℹ 1,333 more rows plot_trim <- plot_trim %>% mutate(sex = factor(sex, levels = c(0, 1), labels = c(\"Male\", \"Female\"))) observed <- dh.getAnonPlotData(     df = \"data\",     var_1 = \"age\",      var_2 = \"weight\") observed ## # A tibble: 804,986 × 3 ##    cohort    age weight ##    <chr>   <dbl>  <dbl> ##  1 alspac  0.130   4.93 ##  2 alspac  0.604   7.37 ##  3 alspac  3.89   18.5  ##  4 alspac  7.64   26.5  ##  5 alspac  8.57   30.4  ##  6 alspac 10.8    39.4  ##  7 alspac 13.0    56.8  ##  8 alspac 17.8    84.4  ##  9 alspac  1.00    9.79 ## 10 alspac  1.36   10.1  ## # ℹ 804,976 more rows ggplot() +    geom_point(     data = sample_frac(observed, .01) %>% dplyr::filter(cohort == \"combined\"),      aes(x = age, y = weight),      alpha = 0.4,      size = 0.1) +   geom_line(     data = plot_trim %>% dplyr::filter(cohort == \"combined\"),      aes(x = age, y = predicted, colour = sex), size = 0.8) +   geom_ribbon(     data = plot_trim %>% dplyr::filter(cohort == \"combined\" & sex == \"Male\"),      aes(x = age, ymin = low_ci, ymax = upper_ci), alpha = 0.1) +   geom_ribbon(     data = plot_trim %>% dplyr::filter(cohort == \"combined\" & sex == \"Female\"),      aes(x = age, ymin = low_ci, ymax = upper_ci), alpha = 0.1) +   scale_x_continuous(limit = c(0, 20), breaks = seq(0, 20, 5), expand = c(0, 0)) +    scale_y_continuous(limit = c(0, 80), breaks = seq(0, 80, 20), expand = c(0, 0)) +   xlab(\"Child age\") +   ylab(\"Predicted weight (KG)\") +   labs(colour = \"Sex\") ggplot() +    geom_point(     data = sample_frac(observed, .01) %>% dplyr::filter(cohort != \"combined\"),      aes(x = age, y = weight),      alpha = 0.4,      size = 0.1) +   geom_line(     data = plot_trim %>% dplyr::filter(cohort != \"combined\"),      aes(x = age, y = predicted, colour = sex), size = 0.8) +   geom_ribbon(     data = plot_trim %>% dplyr::filter(cohort != \"combined\" & sex == \"Male\"),      aes(x = age, ymin = low_ci, ymax = upper_ci), alpha = 0.1) +   geom_ribbon(     data = plot_trim %>% dplyr::filter(cohort != \"combined\" & sex == \"Female\"),      aes(x = age, ymin = low_ci, ymax = upper_ci), alpha = 0.1) +   facet_wrap(~cohort) +   scale_x_continuous(limit = c(0, 20), breaks = seq(0, 20, 5), expand = c(0, 0)) +    scale_y_continuous(limit = c(0, 80), breaks = seq(0, 80, 20), expand = c(0, 0)) +   xlab(\"Child age\") +   ylab(\"Predicted weight (KG)\") +   labs(colour = \"Sex\")"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"part-3-fitting-a-non-linear-trajectory-using-a-transformation-of-the-age-term","dir":"Articles","previous_headings":"","what":"Part 3: Fitting a non-linear trajectory using a transformation of the age term","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"previous model doesn’t look great , especially around age 5 looks distinct non-linearity trajectory capturing. One way address model weight function age, function transformation age. Let’s start creating new variable age^2, see provides better fit. create variable, join back main data frame. Now going simply repeat steps , using transformed variable instead original age variable. First run model: Now create dataframe values fixed effects want predict weight. Note transformed age term, need add transformed version variable reference data. get predicted values, trim ages observed data set sex factor. Let’s plot observed data see fits better: Hmmm. now non-linear trajectory, still doesn’t look great fit. haven’t looked fit statistics residuals yet, eye clearly doesn’t fit data. also doesn’t seem capture sex differences expect. can better .","code":"ds.make(     toAssign = \"data$age^2\",      newobj = \"age_2\")  ds.dataFrame(     x = c(\"data\", \"age_2\"),      newobj = \"data\") age_2.fit <- ds.lmerSLMA(     dataName = \"data\",   formula = \"weight ~ 1 + age_2 + sex + age_2*sex + (1|id_int)\",    datasources = conns) pred_ref_2a <- tibble(     age = seq(0, 25, by = 0.1),      age_2 = age^2,     \"age_2:sex\" = age_2*0,     sex = 0)  pred_ref_2b <- tibble(     age = seq(0, 25, by = 0.11),      age_2 = age^2,     \"age_2:sex\" = age_2*1,     sex = 1)  pred_ref_2 <- bind_rows(pred_ref_2a, pred_ref_2b) pred_data_2 <- dh.predictLmer(     model = age_2.fit,     new_data = pred_ref_2,     coh_names = names(conns)) pred_data_2_trim <- dh.trimPredData(     pred = pred_data_2,     coh_names = c(\"alspac\", \"bcg\", \"bib\", \"probit\", \"combined\"),     min = rep(0, 5),      max = c(20, 5, 5, 20, 20)) pred_data_2_trim <- pred_data_2_trim %>% mutate(sex = factor(sex, levels = c(0, 1), labels = c(\"Male\", \"Female\"))) ggplot() +    geom_point(     data = sample_frac(observed, .01) %>% dplyr::filter(cohort == \"combined\"),      aes(x = age, y = weight),      alpha = 0.4,      size = 0.1) +   geom_line(     data = pred_data_2_trim %>% dplyr::filter(cohort == \"combined\"),      aes(x = age, y = predicted, colour = sex), size = 0.8) +   scale_x_continuous(limit = c(0, 20), breaks = seq(0, 20, 5), expand = c(0, 0)) +    scale_y_continuous(limit = c(0, 80), breaks = seq(0, 80, 20), expand = c(0, 0)) +   xlab(\"Child age\") +   ylab(\"Predicted weight\") +   labs(colour = \"Sex\")"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"part-4-fractional-polynomials","dir":"Articles","previous_headings":"","what":"Part 4: Fractional polynomials","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"Using one transformation age allowed one ‘bend’ trajectory. However, problem saw previous model natural growth trajectories often multiple bends. One way model use two transformations age (e.g. age^2 age^0.5). called fractional polynomials (powers involve fractions). use 2 transformations: give better model fit, greater risk overfitting model. stick two. Even two transformations age, infinite number possible combinations. chose use? may good priori reason chose combination terms. don’t, one reasonable approach select certain set transformations, fit every combination . can see combination age terms provides best model fit.","code":""},{"path":[]},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"remove-values-of-zero","dir":"Articles","previous_headings":"Part 4: Fractional polynomials > Preparing the data for modelling","what":"Remove values of zero","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"Transforming values zero create infinite values break models. add small quantity age variable avoid .","code":"ds.assign(     toAssign = \"data$age+0.01\",      newobj = \"age\",    datasources = conns)  dh.dropCols(     df = \"data\",      vars = \"age\",      type = \"remove\",      new_obj = \"data\")  ds.dataFrame(     x = c(\"data\", \"age\"),      newobj = \"data\")"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"create-transformations-of-age-term","dir":"Articles","previous_headings":"Part 4: Fractional polynomials > Preparing the data for modelling","what":"Create transformations of age term","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"transformations manually, bit cumbersome. can insted use function ds.makeAgePolys create transformations age. use following powers: -2, -1, -0.5, log, 0.5, 2, 3. can check worked, see mean values new variables.","code":"dh.makeAgePolys(     df = \"data\",      age_var = \"age\",      poly_names = c(\"m_2\", \"m_1\", \"m_0_5\", \"log\", \"0_5\", \"2\", \"3\"),      poly_form = c(\"^-2\", \"^-1\", \"^-0.5\", \"log\", \"^0.5\", \"^2\", \"^3\")) poly_summary <- dh.getStats(     df = \"data\",      vars = c(\"agem_2\", \"agem_1\", \"agem_0_5\", \"age_log\", \"age0_5\", \"age2\", \"age3\")) poly_summary$continuous %>% dplyr::select(cohort, variable, mean, std.dev) %>% print(n = Inf) ## # A tibble: 35 × 4 ##    cohort   variable    mean std.dev ##    <chr>    <chr>      <dbl>   <dbl> ##  1 alspac   age_log     2.13    1.3  ##  2 bcg      age_log     1.25    0.67 ##  3 bib      age_log     0.98    0.73 ##  4 probit   age_log     1.4     1.19 ##  5 alspac   age0_5     69.2    86.8  ##  6 bcg      age0_5      6.86    8.19 ##  7 bib      age0_5      5.25    8.85 ##  8 probit   age0_5     34.4    72.0  ##  9 alspac   age2      889.   1393.   ## 10 bcg      age2       27.0    39.2  ## 11 bib      age2       22.6    46.0  ## 12 probit   age2      447.   1125.   ## 13 alspac   age3        0.78    2.12 ## 14 bcg      age3       -0.04    1.69 ## 15 bib      age3       -0.92    2.15 ## 16 probit   age3       -0.21    2.07 ## 17 alspac   agem_0_5    1.48    2.59 ## 18 bcg      agem_0_5    1.68    2.45 ## 19 bib      agem_0_5    2.95    3.54 ## 20 probit   agem_0_5    2       2.65 ## 21 alspac   agem_1      8.89   26.7  ## 22 bcg      agem_1      8.84   26.0  ## 23 bib      agem_1     21.2    38.6  ## 24 probit   agem_1     11.0    28.0  ## 25 alspac   agem_2    792.   2688.   ## 26 bcg      agem_2    754.   2628.   ## 27 bib      agem_2   1945.   3942.   ## 28 probit   agem_2    905.   2845.   ## 29 combined age0_5     39.8  1150    ## 30 combined age2      504.      2.18 ## 31 combined age3       -0.01    1.23 ## 32 combined age_log     1.56   73.8  ## 33 combined agem_0_5    1.99    2.84 ## 34 combined agem_1     12.0    30.0  ## 35 combined agem_2   1042.   3037."},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"identifying-the-best-fitting-model","dir":"Articles","previous_headings":"Part 4: Fractional polynomials","what":"Identifying the best fitting model","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"Ok, now load transformations age term dataframe “data”. Next want fit models paired combination terms. , writing ds.lmerSLMA 28 times, brings fair chance make error code. ’ve written couple functions streamline process.","code":""},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"create-model-formulae","dir":"Articles","previous_headings":"Part 4: Fractional polynomials > Identifying the best fitting model","what":"Create model formulae","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"‘dh.makeLmerForm’ creates model formulae based age terms created. argument “agevars” vector variable names corresponding age transformations created . First try find best shape trajectory, create model formulae just age terms. created table row (total 28) contains formula mixed effects model different combination fractional polynomials.","code":"weight_form <- dh.makeLmerForm(   outcome = \"weight\",    id_var = \"id_int\",    age_vars = c(\"age\", \"agem_2\", \"agem_1\", \"agem_0_5\", \"age_log\", \"age0_5\", \"age2\", \"age3\"),    random = \"intercept\") weight_form %>%  head(10) ## # A tibble: 10 × 2 ##    polys           formula                                ##    <chr[1d]>       <chr>                                  ##  1 age,agem_2      weight~1+ age+agem_2 + (1|id_int)      ##  2 age,agem_1      weight~1+ age+agem_1 + (1|id_int)      ##  3 age,agem_0_5    weight~1+ age+agem_0_5 + (1|id_int)    ##  4 age,age_log     weight~1+ age+age_log + (1|id_int)     ##  5 age,age0_5      weight~1+ age+age0_5 + (1|id_int)      ##  6 age,age2        weight~1+ age+age2 + (1|id_int)        ##  7 age,age3        weight~1+ age+age3 + (1|id_int)        ##  8 agem_2,agem_1   weight~1+ agem_2+agem_1 + (1|id_int)   ##  9 agem_2,agem_0_5 weight~1+ agem_2+agem_0_5 + (1|id_int) ## 10 agem_2,age_log  weight~1+ agem_2+age_log + (1|id_int)"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"fit-all-combinations-of-polynomials","dir":"Articles","previous_headings":"Part 4: Fractional polynomials","what":"Fit all combinations of polynomials","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"function dh.lmeMultPoly takes input argument “formulae” vector formulae. use formulae created . also create vector formulae supply argument. ’ve read Rachel Hughes’ paper, ’ll notice first fits models discovery sample, checks fit remaining sample. ’ve skipped simplicity possible DS. take minutes fitting 28 different models. converegence warnings. can see details : output contains table negative log likelihood model study, average rank model across studies summed negative log likelihood. model lowest summed log-likelhood across studies contains two powers: age^0.5 & age^2. scenario trying fit model cohorts. scenarioes might want fit different model different cohorts. still use table reference best fitting model, example alspac:","code":"poly.fit <- dh.lmeMultPoly(     df = \"data\",     formulae = weight_form$formula,    poly_names = weight_form$polys) ## Error in dh.lmeMultPoly(df = \"data\", formulae = weight_form$formulae, : object 'weight_form' not found poly.fit$convergence ## # A tibble: 28 × 4 ##    poly            completed message all_converged ##    <chr[1d]>       <chr>     <chr>   <lgl>         ##  1 age,agem_2      TRUE      <NA>    TRUE          ##  2 age,agem_1      TRUE      <NA>    TRUE          ##  3 age,agem_0_5    TRUE      <NA>    TRUE          ##  4 age,age_log     TRUE      <NA>    TRUE          ##  5 age,age0_5      TRUE      <NA>    TRUE          ##  6 age,age2        TRUE      <NA>    TRUE          ##  7 age,age3        TRUE      <NA>    TRUE          ##  8 agem_2,agem_1   TRUE      <NA>    FALSE         ##  9 agem_2,agem_0_5 TRUE      <NA>    FALSE         ## 10 agem_2,age_log  TRUE      <NA>    TRUE          ## # ℹ 18 more rows poly.fit$fit ## # A tibble: 28 × 6 ##    model          alspac     bcg      bib   probit   sum_log ##    <chr>           <dbl>   <dbl>    <dbl>    <dbl>     <dbl> ##  1 age0_5,age2  -413072. -25053. -136400. -555192. -1129718. ##  2 age,age2     -414380. -24847. -135066. -562074. -1136366. ##  3 age0_5,age3  -418867. -25055. -136595. -557293. -1137810. ##  4 age,age3     -414581. -25326. -138701. -560576. -1139183. ##  5 age,age0_5   -418305. -25019. -135347. -569398. -1148069. ##  6 age,age_log  -419968. -25864. -139284. -570858. -1155973. ##  7 age,agem_0_5 -420377. -26508. -142164. -570741. -1159790. ##  8 age,agem_1   -420403. -26741. -143292. -570683. -1161119. ##  9 age,agem_2   -420409. -26825. -143753. -570701. -1161687. ## 10 age_log,age2 -419517. -27708. -151222. -565902. -1164349. ## # ℹ 18 more rows poly.fit$fit %>% select(model, alspac) %>% arrange(desc(alspac)) ## # A tibble: 28 × 2 ##    model          alspac ##    <chr>           <dbl> ##  1 age0_5,age2  -413072. ##  2 age,age2     -414380. ##  3 age,age3     -414581. ##  4 age,age0_5   -418305. ##  5 age0_5,age3  -418867. ##  6 age_log,age2 -419517. ##  7 age,age_log  -419968. ##  8 age2,age3    -420299. ##  9 age,agem_0_5 -420377. ## 10 age,agem_1   -420403. ## # ℹ 18 more rows"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"final-model","dir":"Articles","previous_headings":"Part 4: Fractional polynomials","what":"Final model","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"Ok, ’ve got idea best fitting combination age terms . Now can fit final model, including sex interaction age terms. aren’t worrying covariates example, course include .","code":"final.fit <- ds.lmerSLMA(     dataName = \"data\",   formula = \"weight ~ 1 + age0_5 + age2 + sex + age0_5*sex + age2*sex + (1|id_int)\")"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"making-plots","dir":"Articles","previous_headings":"Part 4: Fractional polynomials","what":"Making plots","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"Now can go process make plot. , need create age transformations new data get predicted values weight age. get predicted values, trim ages observed data set sex factor. now can make plots can also plot trajectories cohort Great, looks like much better fit. captured initial growth, followed reduction growth rate age 5 followed increase adolescence. model still isn’t perfect - looking graph problem can see?","code":"pred_ref_final_m <- tibble(     age = seq(0, 25, by = 0.1),      age0_5 = age^0.5,     age2 = age^2,      sex = 0,     \"age0_5:sex\" = age0_5*sex,    \"age2:sex\" = age2*sex)  pred_ref_final_f <- tibble(     age = seq(0, 25, by = 0.1),      age0_5 = age^0.5,     age2 = age^2,      sex = 1,     \"age0_5:sex\" = age0_5*sex,    \"age2:sex\" = age2*sex)  pred_ref_final <- bind_rows(pred_ref_final_m, pred_ref_final_f) pred_ref_final <- dh.predictLmer(     model = final.fit,     new_data = pred_ref_final,     coh_names = names(conns) ) pred_ref_final_trim <- dh.trimPredData(     pred = pred_ref_final,     coh_names = c(\"alspac\", \"bcg\", \"bib\", \"probit\", \"combined\"),     min = rep(0, 5),      max = c(20, 5, 5, 20, 20) ) pred_ref_final_trim <- pred_ref_final_trim %>% mutate(sex = factor(sex, levels = c(0, 1), labels = c(\"Male\", \"Female\"))) ggplot() +    geom_point(     data = sample_frac(observed, .01) %>% dplyr::filter(cohort == \"combined\"),      aes(x = age, y = weight),      alpha = 0.4,      size = 0.1) +   geom_line(     data = pred_ref_final_trim %>% dplyr::filter(cohort == \"combined\"),      aes(x = age, y = predicted, colour = sex), size = 0.8) +   geom_ribbon(     data = pred_ref_final_trim %>% dplyr::filter(cohort == \"combined\" & sex == \"Male\"),      aes(x = age, ymin = low_ci, ymax = upper_ci), alpha = 0.1) +   geom_ribbon(     data = pred_ref_final_trim %>% dplyr::filter(cohort == \"combined\" & sex == \"Female\"),      aes(x = age, ymin = low_ci, ymax = upper_ci), alpha = 0.1) +   scale_x_continuous(limit = c(0, 20), breaks = seq(0, 20, 5), expand = c(0, 0)) +    scale_y_continuous(limit = c(0, 80), breaks = seq(0, 80, 20), expand = c(0, 0)) +   xlab(\"Child age\") +   ylab(\"Predicted weight (KG)\") +   labs(colour = \"Sex\") ggplot() +    geom_point(     data = sample_frac(observed, .01) %>% dplyr::filter(cohort != \"combined\"),      aes(x = age, y = weight),      alpha = 0.4,      size = 0.1) +   geom_line(     data = pred_ref_final_trim %>% dplyr::filter(cohort != \"combined\"),      aes(x = age, y = predicted, colour = sex), size = 0.8) +   geom_ribbon(     data = pred_ref_final_trim %>% dplyr::filter(cohort != \"combined\" & sex == \"Male\"),      aes(x = age, ymin = low_ci, ymax = upper_ci), alpha = 0.1) +   geom_ribbon(     data = pred_ref_final_trim %>% dplyr::filter(cohort != \"combined\" & sex == \"Female\"),      aes(x = age, ymin = low_ci, ymax = upper_ci), alpha = 0.1) +   facet_wrap(~cohort) +   scale_x_continuous(limit = c(0, 20), breaks = seq(0, 20, 5), expand = c(0, 0)) +    scale_y_continuous(limit = c(0, 80), breaks = seq(0, 80, 20), expand = c(0, 0)) +   xlab(\"Child age\") +   ylab(\"Predicted weight (KG)\") +   labs(colour = \"Sex\")"},{"path":"/articles/ds-helper-trajectories-vignette.html","id":"checking-model-fit","dir":"Articles","previous_headings":"","what":"Checking model fit","title":"Conducting mixed effect/trajectory analysis using DataSHIELD","text":"final step check well model fits different age points. can approximate Table 2 Tilling et al. (2014) “Modelling Childhood Growth …”. First get mean observed values weight different age bands. ‘intervals’ argument specifies want bin age variable. takes minutes run. rename column ‘observed’: Now get average predicted values age bands Finally join observed predicted values one table, calculate difference two. can also use confidence intervals calculate upper lower bounds residual. can see model fit isn’t great PROBIT towards extremes. cohorts, looks pretty good. Finish logging demo server","code":"observed_by_age <- dh.meanByGroup(     df = \"data\",      outcome = \"weight\",      group_var = \"age\",      intervals = c(0, 1, 1, 2, 3, 5, 6, 10, 11, 15, 16, 18) ) observed_by_age ## # A tibble: 19 × 6 ##    cohort group  mean std.dev nvalid nmissing ##    <chr>  <chr> <dbl>   <dbl>  <dbl>    <dbl> ##  1 alspac 0_1    5.79    2.08  37577    92104 ##  2 bcg    0_1    6.12    1.92   4949     7775 ##  3 bib    0_1    5.39    1.88  40931    27933 ##  4 probit 0_1    5.94    1.99 102981    88243 ##  5 alspac 11_15 48.6    11.3   20591   109090 ##  6 probit 11_15 41.6     9.89  13109   178115 ##  7 alspac 16_18 67.3    13.9    4299   125382 ##  8 probit 16_18 62.9    12.5    7962   183262 ##  9 alspac 1_2   12.0     1.98  10065   119616 ## 10 bcg    1_2   11.1     2.19   1882    10842 ## 11 bib    1_2   11.8     2.34   7927    60937 ## 12 probit 1_2   11.1     2.39  17930   173294 ## 13 alspac 3_5   17.0     2.48  14382   115299 ## 14 bcg    3_5   16.6     2.66   3582     9142 ## 15 bib    3_5   17.6     2.73  11164    57700 ## 16 probit 3_5   16.9     2.51  13378   177846 ## 17 alspac 6_10  29.1     7.07  20138   109543 ## 18 bib    6_10  25.6     4.33    409    68455 ## 19 probit 6_10  23.0     4.10  14980   176244 obs <- observed_by_age %>% dplyr::rename(observed = mean) pred_by_age <- pred_ref_final_trim %>% mutate(     group = case_when(         age > 0 & age <= 1 ~ \"0_1\",          age >= 1 & age <= 2 ~ \"1_2\",          age >= 3 & age <= 5 ~ \"3_5\",          age >= 6 & age <= 10 ~ \"6_10\",          age >= 11 & age <= 15 ~ \"11_15\",          age >= 16 & age <= 18 ~ \"16_18\")         ) %>% dplyr::filter(!is.na(group)) %>% group_by(group, cohort) %>% summarise(     predicted = round(mean(predicted), 2),     low_ci = round(mean(low_ci), 2),     upper_ci = round(mean(upper_ci), 2)) pred_by_age ## # A tibble: 24 × 5 ## # Groups:   group [6] ##    group cohort   predicted low_ci upper_ci ##    <chr> <chr>        <dbl>  <dbl>    <dbl> ##  1 0_1   alspac        7.33   7.22     7.44 ##  2 0_1   bcg           7.57   7.45     7.69 ##  3 0_1   bib           7.38   7.35     7.41 ##  4 0_1   combined      7.41  NA       NA    ##  5 0_1   probit        7.31   7.26     7.36 ##  6 11_15 alspac       48.9   48.8     49.0  ##  7 11_15 combined     42.2   NA       NA    ##  8 11_15 probit       47     46.9     47.1  ##  9 16_18 alspac       68.7   68.6     68.9  ## 10 16_18 combined     56.9   NA       NA    ## # ℹ 14 more rows res_tab <- left_join(obs, pred_by_age, by = c(\"group\", \"cohort\")) %>% mutate(     difference = round(observed - predicted, 2),     lower_res = round(observed - upper_ci, 2),     higher_res = round(observed - low_ci, 2),     group = factor(         group,          levels = c(\"0_1\", \"1_2\", \"3_5\", \"6_10\", \"11_15\", \"16_18\"),         ordered = TRUE),      limits = paste0(lower_res, \" to \", higher_res)) %>% filter(!is.na(predicted)) %>% dplyr::select(group, cohort, observed, predicted, difference, limits) %>% arrange(group) %>% group_by(cohort) %>% group_split %>% set_names(names(conns)) res_tab ## <list_of< ##   tbl_df< ##     group     : ordered<59289> ##     cohort    : character ##     observed  : double ##     predicted : double ##     difference: double ##     limits    : character ##   > ## >[4]> ## $alspac ## # A tibble: 6 × 6 ##   group cohort observed predicted difference limits         ##   <ord> <chr>     <dbl>     <dbl>      <dbl> <chr>          ## 1 0_1   alspac     5.79      7.33      -1.54 -1.65 to -1.43 ## 2 1_2   alspac    12.0      10.9        1.11 1.01 to 1.22   ## 3 3_5   alspac    17.0      17.4       -0.49 -0.6 to -0.38  ## 4 6_10  alspac    29.1      29.4       -0.25 -0.36 to -0.14 ## 5 11_15 alspac    48.6      48.9       -0.24 -0.35 to -0.13 ## 6 16_18 alspac    67.3      68.7       -1.46 -1.61 to -1.3  ##  ## $bcg ## # A tibble: 3 × 6 ##   group cohort observed predicted difference limits         ##   <ord> <chr>     <dbl>     <dbl>      <dbl> <chr>          ## 1 0_1   bcg        6.12      7.57      -1.45 -1.57 to -1.33 ## 2 1_2   bcg       11.1      11.4       -0.29 -0.41 to -0.17 ## 3 3_5   bcg       16.6      16.9       -0.27 -0.4 to -0.15  ##  ## $bib ## # A tibble: 3 × 6 ##   group cohort observed predicted difference limits         ##   <ord> <chr>     <dbl>     <dbl>      <dbl> <chr>          ## 1 0_1   bib        5.39      7.38      -1.99 -2.02 to -1.96 ## 2 1_2   bib       11.8      11.1        0.7  0.67 to 0.74   ## 3 3_5   bib       17.6      17.2        0.41 0.37 to 0.44   ##  ## $probit ## # A tibble: 6 × 6 ##   group cohort observed predicted difference limits         ##   <ord> <chr>     <dbl>     <dbl>      <dbl> <chr>          ## 1 0_1   probit     5.94      7.31      -1.37 -1.42 to -1.32 ## 2 1_2   probit    11.1      10.7        0.45 0.4 to 0.5     ## 3 3_5   probit    16.9      16.9       -0.02 -0.08 to 0.04  ## 4 6_10  probit    23.0      28.3       -5.32 -5.38 to -5.25 ## 5 11_15 probit    41.6      47         -5.38 -5.46 to -5.31 ## 6 16_18 probit    62.9      66.1       -3.15 -3.26 to -3.04 datashield.logout(conns)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tim Cadman. Author, maintainer. Sido Haakma. Contributor. Tom Bishop. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cadman T (2024). dsHelper: Helper Functions Use 'DataSHIELD'. R package version 1.6.0,  https: //lifecycle-project.github.io/ds-helper/, https://github.com/lifecycle-project/ds-helper/.","code":"@Manual{,   title = {dsHelper: Helper Functions for Use with 'DataSHIELD'},   author = {Tim Cadman},   year = {2024},   note = {R package version 1.6.0,  https: //lifecycle-project.github.io/ds-helper/},   url = {https://github.com/lifecycle-project/ds-helper/}, }"},{"path":"/index.html","id":"datashield-helper-functions","dir":"","previous_headings":"","what":"Helper Functions for Use with DataSHIELD","title":"Helper Functions for Use with DataSHIELD","text":"set functions make processes data manipulation analysis user-friendly. now deprecated favour functions dsTidyverse, much quicker flexible.","code":""},{"path":"/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Helper Functions for Use with DataSHIELD","text":"can install package running following command R Studio: First need prerequisites: Now install package use package:","code":"install.packages(\"remotes\") library(remotes) install_github(\"lifecycle-project/ds-helper\") library(dsHelper)"},{"path":"/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Helper Functions for Use with DataSHIELD","text":"find bugs, like request additional functionality written functions like included package please contact t.j.cadman@umcg.nl.","code":""},{"path":"/index.html","id":"troubleshooting","dir":"","previous_headings":"","what":"Troubleshooting","title":"Helper Functions for Use with DataSHIELD","text":"Please check: troubleshooting","code":""},{"path":"/reference/dh.anyData.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe whether variables are completely missing for each cohort — dh.anyData","title":"Describe whether variables are completely missing for each cohort — dh.anyData","text":"performing Study Level Meta Analysis coefficients, usually necessary cohorts data variables model. Manually identifying cohorts data required variables time-consuming risk error. function automatically generates look-table information.","code":""},{"path":"/reference/dh.anyData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe whether variables are completely missing for each cohort — dh.anyData","text":"","code":"dh.anyData(df = NULL, vars = NULL, conns = NULL, checks = TRUE)"},{"path":"/reference/dh.anyData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe whether variables are completely missing for each cohort — dh.anyData","text":"df Character specifying server-side data frame. vars Character vector columns within df. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE.","code":""},{"path":"/reference/dh.anyData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe whether variables are completely missing for each cohort — dh.anyData","text":"Client-side tibble containing columns variable rows cohort indicating variable completely missing.","code":""},{"path":[]},{"path":"/reference/dh.buildModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Exposure-Outcome Models with Optional Covariates — dh.buildModels","title":"Build Exposure-Outcome Models with Optional Covariates — dh.buildModels","text":"function constructs exposure-outcome models cohort using available exposure outcome variables, optionally available covariates.","code":""},{"path":"/reference/dh.buildModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Exposure-Outcome Models with Optional Covariates — dh.buildModels","text":"","code":"dh.buildModels(avail_exp = NULL, avail_cov = NULL, avail_out = NULL)"},{"path":"/reference/dh.buildModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Exposure-Outcome Models with Optional Covariates — dh.buildModels","text":"avail_exp Output dh.anyData detailing available exposures cohort. avail_cov Output dh.anyData detailing available exposures cohort (optional). avail_out Output dh.anyData detailing available outcomes  cohort.","code":""},{"path":"/reference/dh.buildModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Exposure-Outcome Models with Optional Covariates — dh.buildModels","text":"tibble containing four columns: () cohort, (ii) exposure, (iii) outcome, (iv) regression formula combinations. Optionally contains fifth column list covariates avail_cov null.","code":""},{"path":"/reference/dh.buildModels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Exposure-Outcome Models with Optional Covariates — dh.buildModels","text":"function performs following steps: Summarizes available exposure outcome variables. Combines available exposure outcome variables cohorts. Tidies combinations. covariates available, splits combinations cohort, adds covariates, creates formulas. Returns constructed models formulas.","code":""},{"path":"/reference/dh.classDiscrepancy.html","id":null,"dir":"Reference","previous_headings":"","what":"Describes the class of one or more variables across cohorts and indicates differences — dh.classDiscrepancy","title":"Describes the class of one or more variables across cohorts and indicates differences — dh.classDiscrepancy","text":"Either using ds.dataFrameFill, due mistakes uploading data, variable may different class across cohorts. can create problems many DataSHIELD functions require input variable class studies. function produces tibble showing class variable.","code":""},{"path":"/reference/dh.classDiscrepancy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describes the class of one or more variables across cohorts and indicates differences — dh.classDiscrepancy","text":"","code":"dh.classDiscrepancy(df = NULL, vars = NULL, conns = NULL, checks = TRUE)"},{"path":"/reference/dh.classDiscrepancy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describes the class of one or more variables across cohorts and indicates differences — dh.classDiscrepancy","text":"df Character specifying server-side data frame. vars Optionally, character vector specifying columns within df describe. NULL variables included. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE.","code":""},{"path":"/reference/dh.classDiscrepancy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describes the class of one or more variables across cohorts and indicates differences — dh.classDiscrepancy","text":"tibble columns variable rows cohort describing class variable, additional column 'discrepancy' summarising whether differences cohorts.","code":""},{"path":[]},{"path":"/reference/dh.columnCast.html","id":null,"dir":"Reference","previous_headings":"","what":"Casts column classes of a table — dh.columnCast","title":"Casts column classes of a table — dh.columnCast","text":"function allowed change class variables within data frame. depricated can now use dsTidyverseClient::ds.mutate() much quicker greater flexibility.","code":""},{"path":"/reference/dh.columnCast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Casts column classes of a table — dh.columnCast","text":"","code":"dh.columnCast(   df = NULL,   target_vars = NULL,   target_class = NULL,   conns = NULL,   checks = TRUE )"},{"path":"/reference/dh.columnCast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Casts column classes of a table — dh.columnCast","text":"df Character specifying server-side data frame. target_vars Character vector specifying columns casted new classes. target_class Character vector specifying objective classes selected columns. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE.","code":""},{"path":"/reference/dh.columnCast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Casts column classes of a table — dh.columnCast","text":"Tibble summary successful failed casts","code":""},{"path":"/reference/dh.createTableOne.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates tables in useful formats for including in manuscripts — dh.createTableOne","title":"Creates tables in useful formats for including in manuscripts — dh.createTableOne","text":"dh.getStats extracts key statistics stores clientside list. dh.createTableOne builds formatting extract stats table can included manuscript. Flexible formatting options included.","code":""},{"path":"/reference/dh.createTableOne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates tables in useful formats for including in manuscripts — dh.createTableOne","text":"","code":"dh.createTableOne(   stats = NULL,   vars = NULL,   var_labs = NULL,   cat_labs = NULL,   type = NULL,   coh_labs = NULL,   coh_direction = \"cols\",   cont_format = NULL,   inc_missing = NULL,   sig_digits = 3,   perc_denom = NULL )"},{"path":"/reference/dh.createTableOne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates tables in useful formats for including in manuscripts — dh.createTableOne","text":"stats Exported object dh.getStats. vars Variable included table. var_labs Tibble two columns: 'variable' containing names variables specified vars, 'var_label' containing replacement labels variables. cat_labs Tibble three columns: 'variable' containing names categorical variables specified vars, 'category' containing categories variabels, \"cat_label\" containing replacement category labels variables. type Character specifying cohorts include table. \"combined\" combined stats returned, \"cohort\" cohort-specific stats returned, \"\" everything returned. coh_labs Tibble two columns: 'cohort' containing names cohorts included stats, 'cohort_labs' containing replacement labels cohorts. coh_direction Character specifying direction data type 'cohort' ''. Use 'rows' return cohorts rows variable columns, use 'cols' return cohorts columns variables rows. Defauls \"col\". cont_format Character specifying summary statistic return continuous stats. Use 'med_iqr' return median interquartile range, use 'mean_sd' return mean standard deviation. Default \"med_iqr\". inc_missing Boolean specifying whether return missing values output. Use TRUE yes FALSE . sig_digits Optionally, number decimal places round output . Default 2. perc_denom denominator percentages. Either 'valid' valid cases 'total' total cases.","code":""},{"path":"/reference/dh.createTableOne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates tables in useful formats for including in manuscripts — dh.createTableOne","text":"Tibble containing formatted summary statistics. coh_direction 'cols', tibble contain four columns: 'cohort', 'variable', 'category' & value. coh_direction rows, tibble contain column 'cohort' well columns continuous variables categories categorical variables.","code":""},{"path":[]},{"path":"/reference/dh.defineCases.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicates whether each subject has any or all of the variables contained within a set — dh.defineCases","title":"Indicates whether each subject has any or all of the variables contained within a set — dh.defineCases","text":"function allowed describe whether non-missing values set variables. depricated can now use dsTidyverseClient::ds.filter() create subset data frame matching multiple conditions.","code":""},{"path":"/reference/dh.defineCases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicates whether each subject has any or all of the variables contained within a set — dh.defineCases","text":"","code":"dh.defineCases(   df = NULL,   vars = NULL,   type = NULL,   new_obj = NULL,   conns = NULL,   checks = FALSE,   newobj = NULL )"},{"path":"/reference/dh.defineCases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indicates whether each subject has any or all of the variables contained within a set — dh.defineCases","text":"df Character specifying server-side data frame. vars Character vector columns within df form definition set. type Character specifying define cases. Use \"\" describe subjects data vars, \"\" describe subjects data `vars. new_obj Character specifying name created serverside object. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE. newobj Retired argument name. Please use `new_obj' instead.","code":""},{"path":"/reference/dh.defineCases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indicates whether each subject has any or all of the variables contained within a set — dh.defineCases","text":"Server-side vector defining whether subject meets criteria defined vars type. 1 indicates criteria met, 0 indicates criteria met.","code":""},{"path":"/reference/dh.dropCols.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes columns from a serverside data frame — dh.dropCols","title":"Removes columns from a serverside data frame — dh.dropCols","text":"function allowed subset data frame column names. deprecated can now use dsTidyverseClient::ds.select() much quicker greater flexibility.","code":""},{"path":"/reference/dh.dropCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes columns from a serverside data frame — dh.dropCols","text":"","code":"dh.dropCols(   df = NULL,   vars = NULL,   new_obj = NULL,   type = NULL,   conns = NULL,   checks = TRUE,   new_df_name = NULL )"},{"path":"/reference/dh.dropCols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes columns from a serverside data frame — dh.dropCols","text":"df Character specifying server-side data frame. vars Character vector specifying columns within df removed kept. new_obj Optionally, character specifying name new server-side data frame. Default return original data frame columns removed. type Character specifying treat vars. \"remove\" variables removed data frame, \"keep\" variables kept data frame others removed. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE. new_df_name Retired argument name. Please use `new_obj' instead.","code":""},{"path":"/reference/dh.dropCols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes columns from a serverside data frame — dh.dropCols","text":"Server-side data frame specified subset columns.","code":""},{"path":"/reference/dh.findVarsIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Return return indices of column names in server-side dataframe — dh.findVarsIndex","title":"Return return indices of column names in server-side dataframe — dh.findVarsIndex","text":"DataSHIELD functions require column indices parameters. hqighly susceptable breaking changes code change order variables. function allows specify names columns returns indices.","code":""},{"path":"/reference/dh.findVarsIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return return indices of column names in server-side dataframe — dh.findVarsIndex","text":"","code":"dh.findVarsIndex(df = NULL, vars = NULL, conns = NULL, checks = TRUE)"},{"path":"/reference/dh.findVarsIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return return indices of column names in server-side dataframe — dh.findVarsIndex","text":"df Character specifying server-side data frame. vars Character vector columns within df return indices. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE.","code":""},{"path":"/reference/dh.findVarsIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return return indices of column names in server-side dataframe — dh.findVarsIndex","text":"Client-side list indices corresponding vars, length list corresponds number cohorts included conns.","code":""},{"path":"/reference/dh.getAnonPlotData.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts an anonymised version of serverside data which can be used to create bespoke plots — dh.getAnonPlotData","title":"Extracts an anonymised version of serverside data which can be used to create bespoke plots — dh.getAnonPlotData","text":"Whilst DataSHIELD basic plotting functionality, publications may need flexiblity creating plots. function calls server-side functions create anonymised copy data, returns data client-side object. values can used create plots (e.g ggplot2).","code":""},{"path":"/reference/dh.getAnonPlotData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts an anonymised version of serverside data which can be used to create bespoke plots — dh.getAnonPlotData","text":"","code":"dh.getAnonPlotData(   df = NULL,   var_1 = NULL,   var_2 = NULL,   conns = NULL,   checks = TRUE )"},{"path":"/reference/dh.getAnonPlotData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts an anonymised version of serverside data which can be used to create bespoke plots — dh.getAnonPlotData","text":"df Character specifying server-side data frame. var_1 Character giving name column within df extract anonymised data. var_2 Optionally, character specifying second column within df. column specified scatter plot data returned var_1 explanatory variable var_2 outcome variable. Default NULL returns anonymised data var_1. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE.","code":""},{"path":"/reference/dh.getAnonPlotData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts an anonymised version of serverside data which can be used to create bespoke plots — dh.getAnonPlotData","text":"tibble long format containing columns 'cohort', 'var_1' optionally var_2. values var1 var_2 anonymised data points.","code":""},{"path":"/reference/dh.getAnonPlotData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracts an anonymised version of serverside data which can be used to create bespoke plots — dh.getAnonPlotData","text":"function can return two types anonymised data: either anonymised data single variable, scatter-plot data two variables.","code":""},{"path":"/reference/dh.getRmStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces descriptive statistics based on repeated measures data which it would be useful to report in papers. — dh.getRmStats","title":"Produces descriptive statistics based on repeated measures data which it would be useful to report in papers. — dh.getRmStats","text":"Produces descriptive statistics based repeated measures data useful report papers.","code":""},{"path":"/reference/dh.getRmStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces descriptive statistics based on repeated measures data which it would be useful to report in papers. — dh.getRmStats","text":"","code":"dh.getRmStats(   df = NULL,   outcome = NULL,   id_var = NULL,   age_var = NULL,   conns = NULL )"},{"path":"/reference/dh.getRmStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces descriptive statistics based on repeated measures data which it would be useful to report in papers. — dh.getRmStats","text":"df datashield dataframe outcome name outcome variable df id_var name id variable df age_var name age variable df conns connection object DataSHIELD backends","code":""},{"path":"/reference/dh.getRmStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produces descriptive statistics based on repeated measures data which it would be useful to report in papers. — dh.getRmStats","text":"tibble containing following columns: min_age: 5th percentile age max_age: 95th percentile age n_obs: total number observations data n_participants: total number unique participants n_meas_5: 5th percentile measurements per individual n_meas_med: median number measurements per individual n_meas_95: 95th percentile measurements per individual","code":""},{"path":"/reference/dh.getStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces a range of descriptive statistics in a useful format — dh.getStats","title":"Produces a range of descriptive statistics in a useful format — dh.getStats","text":"Whilst dsBaseClient provides functions 'ds.table' 'ds.summary' calculate descriptive statistics, output useable format. function extracts key descriptive statistics returns tibble.","code":""},{"path":"/reference/dh.getStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces a range of descriptive statistics in a useful format — dh.getStats","text":"","code":"dh.getStats(df = NULL, vars = NULL, digits = 2, conns = NULL, checks = TRUE)"},{"path":"/reference/dh.getStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces a range of descriptive statistics in a useful format — dh.getStats","text":"df Character specifying server-side data frame. vars Character vector columns within df summarise. digits Optionally, number decimal places round output . Default 2. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE.","code":""},{"path":"/reference/dh.getStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produces a range of descriptive statistics in a useful format — dh.getStats","text":"client-side list two elements: \"categorical\" \"continuous\". element contains tibble descriptive statistics follows. Categorical: \"variable\" = Variable name. cohort = Cohort name, \"combined\" refers pooled statistics. category = Level variable, including 'missing' category. value = Number observations within category. cohort_n = Total number observations per cohort within df. valid_n = Number valid observations variable (sum ns categories excluding missing). missing_n = Number missing observations. perc_valid = Numnber observations within category percentage valid_n. perc_total = Number observations within category percentage cohort_n. Continuous: variable = . cohort = . mean = Mean. pooled value calculated fixed-effect meta-analysis. std.dev = Standard deviation. pooled value also calculate fixed- effect meta-analysis. perc_5, perc_10, perc_25, perc_50, perc_75, perc_90, perc_95 = 5th 95th percentile values. valid_n = . cohort_n = . missing_n = . missing_perc = Percentage observations missing.","code":""},{"path":"/reference/dh.getStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Produces a range of descriptive statistics in a useful format — dh.getStats","text":"function also overcomes issue ds.summary, throws error variable missing one study. contrast, dh.getStats return variable cohort NAs. See 'value' details returned statistics.","code":""},{"path":[]},{"path":"/reference/dh.lmTab.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts coefficients and confidence intervals from linear models — dh.lmTab","title":"Extracts coefficients and confidence intervals from linear models — dh.lmTab","text":"conveniently view model results make tables, useful extract coefficients useable format. function extracts coefficients ds.glm, ds.glmSLMA ds.lmerSLMA objects.","code":""},{"path":"/reference/dh.lmTab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts coefficients and confidence intervals from linear models — dh.lmTab","text":"","code":"dh.lmTab(   model = NULL,   type = NULL,   coh_names = NULL,   direction = NULL,   ci_format = NULL,   family = \"gaussian\",   digits = 2,   exponentiate = FALSE,   extract_random = FALSE )"},{"path":"/reference/dh.lmTab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts coefficients and confidence intervals from linear models — dh.lmTab","text":"model Object returned either ds.glm, ds.glmSLMA ds.lmerSLMA functions. type Character specifying type object provided model. Can either \"glm_ipd\", \"glm_slma\" \"lmer_slma\". coh_names Character vector cohorts included model. Note must order cohorts included model. direction Character specifying output format. Can either \"wide\" \"long\". See \"Value\" details. ci_format format confidence intervals direction \"wide\". \"separate\", upper lower confidence intervals displayed columns. \"paste\", confidence intervals returned column coefficient within brackets. Option \"paste\" available ci_format \"wide\" family Specifies family used analysis type \"glm_ipd\" \"glm_slma\". Options \"gaussian\" \"binomial\", default \"gaussian\". digits Optionally, number decimal places round output . Default 2. exponentiate Optionally, specify whether estimates binomial models exponentiated, ie returned odds ratios. argument ignored type \"gaussian\". extract_random Optionally, specify whether return random effects mixed effects models.","code":""},{"path":"/reference/dh.lmTab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts coefficients and confidence intervals from linear models — dh.lmTab","text":"tibble. direction \"wide\" & ci_format \"paste\", contains five columns: variable est lowci uppci pvalue direction \"long\", tibble three columns returned: variable coefficient (containing values \"est\", \"lowci\", \"uppci\", \"pvalue\") value type \"lmer_slma\", list 2 elements first element described , second element tibble random effects 5 columns: \"cohort\", \"group\", \"var1\", \"var2\", \"stddev\". \"stddev\" gives either #' Extracts random effects lmer_slma model. Returns tibble containing, cohort, standard deviation random terms standard deviation residual error. two random terms included, also returns correlation terms.","code":""},{"path":[]},{"path":"/reference/dh.lmeMultPoly.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit multiple mixed effects models containing different combination of fractional polynomials — dh.lmeMultPoly","title":"Fit multiple mixed effects models containing different combination of fractional polynomials — dh.lmeMultPoly","text":"function enables fit multiple models different combinations polynomial terms compares fit.","code":""},{"path":"/reference/dh.lmeMultPoly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit multiple mixed effects models containing different combination of fractional polynomials — dh.lmeMultPoly","text":"","code":"dh.lmeMultPoly(   df = NULL,   formulae = NULL,   poly_names = NULL,   conns = NULL,   checks = TRUE )"},{"path":"/reference/dh.lmeMultPoly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit multiple mixed effects models containing different combination of fractional polynomials — dh.lmeMultPoly","text":"df Character specifying server-side data frame. formulae Character vector containing model formulae fit. poly_names Character vector names models specified formulae conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE.","code":""},{"path":"/reference/dh.lmeMultPoly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit multiple mixed effects models containing different combination of fractional polynomials — dh.lmeMultPoly","text":"List containing three elements: models = List objects returned ds.lmerSLMA model fitted. convergence = Tibble providing information convergence problems error model fitted. fit = Tibble columns containing negative loglikehood statistic cohort rows model fitted. additional column provides sum loglikelihoods across cohorts.","code":""},{"path":[]},{"path":"/reference/dh.localProxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a local proxy dataframe to enable local auto-completion in RStudio — dh.localProxy","title":"Generate a local proxy dataframe to enable local auto-completion in RStudio — dh.localProxy","text":"remote dataframe servers, can challenging remember variable names writing code. dataframes remote servers, auto-complete work RStudio. purpose function create local object structure remote data frame enables use autocomplete writing DataSHIELD code.","code":""},{"path":"/reference/dh.localProxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a local proxy dataframe to enable local auto-completion in RStudio — dh.localProxy","text":"","code":"dh.localProxy(df = NULL, conns = NULL, checks = TRUE)"},{"path":"/reference/dh.localProxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a local proxy dataframe to enable local auto-completion in RStudio — dh.localProxy","text":"df Character specifying server-side data frame. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE.","code":""},{"path":"/reference/dh.localProxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a local proxy dataframe to enable local auto-completion in RStudio — dh.localProxy","text":"Creates local proxy dataframe. Stops function df exist contains variables inconsistent class across cohorts.","code":""},{"path":"/reference/dh.localProxy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a local proxy dataframe to enable local auto-completion in RStudio — dh.localProxy","text":"dataframe \"D\" columns LAB_TSC, DIS_CVA DIS_DIAB, normally need write: ds.summary(\"D$LAB_TSC\") variable name spelled correctly (autocomplete!) remember quotation marks. However running function can type: ds.summary(D$ hit tab, list variables displayed. Choose one hit enter finish : ds.summary(D$LAB_TSC) - quotation marks needed either!","code":""},{"path":"/reference/dh.makeAgePolys.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces multiple transformations of the age term for fractional polynomial analyses — dh.makeAgePolys","title":"Produces multiple transformations of the age term for fractional polynomial analyses — dh.makeAgePolys","text":"trajectory analyses using fractional polynomials often want try models different combinations age polynomials. function creates multiple transformations age variable different powers. recommend moving dsTidyverseClient::ds.mutate() quicker, although require lines code.","code":""},{"path":"/reference/dh.makeAgePolys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces multiple transformations of the age term for fractional polynomial analyses — dh.makeAgePolys","text":"","code":"dh.makeAgePolys(   df = NULL,   age_var = NULL,   poly_form = c(\"^-2\", \"^-1\", \"^-0.5\", \"log\", \"^0.5\", \"^2\", \"^3\"),   poly_names = c(\"_m_2\", \"_m_1\", \"_m_0_5\", \"log\", \"_0_5\", \"_2\", \"_3\"),   conns = NULL,   checks = TRUE,   agevars = NULL )"},{"path":"/reference/dh.makeAgePolys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces multiple transformations of the age term for fractional polynomial analyses — dh.makeAgePolys","text":"df Character specifying server-side data frame. age_var Character specifying age variable within df transform. poly_form Character vector powers transform age_var. poly_names Character vector names created variables. Must length order poly_form. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE. agevars Retired argument name. Please use `age_var' instead.","code":""},{"path":"/reference/dh.makeAgePolys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produces multiple transformations of the age term for fractional polynomial analyses — dh.makeAgePolys","text":"Transformations age added columns server-side object specified df.","code":""},{"path":[]},{"path":"/reference/dh.makeExcludedDf.html","id":null,"dir":"Reference","previous_headings":"","what":"Given df-A & df-B, creates a new df which is the rows in A but not in B — dh.makeExcludedDf","title":"Given df-A & df-B, creates a new df which is the rows in A but not in B — dh.makeExcludedDf","text":"Often need exclude participants analysis. function created dataframe containing participants original_df final_df. deprecated can now use dsTidyverseClient::ds.filter, much quicker flexible.","code":""},{"path":"/reference/dh.makeExcludedDf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given df-A & df-B, creates a new df which is the rows in A but not in B — dh.makeExcludedDf","text":"","code":"dh.makeExcludedDf(   original_df,   final_df,   id_var = \"child_id\",   new_obj,   type = \"wide\",   conns = NULL )"},{"path":"/reference/dh.makeExcludedDf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given df-A & df-B, creates a new df which is the rows in A but not in B — dh.makeExcludedDf","text":"original_df Dataframe containing full sample final_df Dataframe containing included sample id_var Character giving name column within df uniquely identifies subject. new_obj Character specifying name created serverside object. type Specifies type dataframe original_df. Either 'long' 'wide'. NOTE CURRENTLY FUNCTIONAL - WORKS WIDE. conns DataSHIELD connections object.","code":""},{"path":"/reference/dh.makeExcludedDf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given df-A & df-B, creates a new df which is the rows in A but not in B — dh.makeExcludedDf","text":"Creates serverside dataframe containing rows original_df contained final_df","code":""},{"path":"/reference/dh.makeIQR.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms variables based on their interquartile range — dh.makeIQR","title":"Transforms variables based on their interquartile range — dh.makeIQR","text":"function scales variables interquartile range. IQR calulcated either within cohort using combined IQR across cohorts. formula used : value_subject / (75th percentile - 25th percentile).","code":""},{"path":"/reference/dh.makeIQR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms variables based on their interquartile range — dh.makeIQR","text":"","code":"dh.makeIQR(   df = NULL,   vars = NULL,   type = c(\"combine\", \"split\"),   new_obj = df,   conns = NULL,   checks = TRUE,   new_df_name = NULL )"},{"path":"/reference/dh.makeIQR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms variables based on their interquartile range — dh.makeIQR","text":"df Character specifying server-side data frame. vars Character vector columns within df transform. type Use \"combine\" transform variable based combined IQR across cohorts specified conns, \"split\" transform based within-cohort IQR. new_obj Character specifying name created serverside object. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE. new_df_name Retired argument. Please use `new_obj' instead.","code":""},{"path":"/reference/dh.makeIQR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms variables based on their interquartile range — dh.makeIQR","text":"Server-side object specified df transformed variables added columns. Variables suffix \"_iqr_c\" type \"combine\", \"_iqr_s\" type \"split\".","code":""},{"path":[]},{"path":"/reference/dh.makeLmerForm.html","id":null,"dir":"Reference","previous_headings":"","what":"Make formulae for fitting multiple fractional polynomial models — dh.makeLmerForm","title":"Make formulae for fitting multiple fractional polynomial models — dh.makeLmerForm","text":"function designed used dh.lmeMultPoly. generates formulae multiple fractional polynomial models can used input formulae argument dh.lmeMultPoly.","code":""},{"path":"/reference/dh.makeLmerForm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make formulae for fitting multiple fractional polynomial models — dh.makeLmerForm","text":"","code":"dh.makeLmerForm(   outcome = NULL,   id_var = NULL,   age_vars = NULL,   random = NULL,   fixed = NULL,   age_interactions = NULL )"},{"path":"/reference/dh.makeLmerForm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make formulae for fitting multiple fractional polynomial models — dh.makeLmerForm","text":"outcome Character specifying name outcome variable within data frame specified df argument dh.lmeMultPoly. id_var Character specifying name column uniquely identifies subject within data frame specified df argument dh.lmeMultPoly. age_vars Character vector specifying names age polynomials present data frame specified df argument dh.lmeMultPoly. random Specifies random effects include formulae. Use either \"intercept\" random intercept model \"slope\" random slope model. fixed Optionally, character vector specifying fixed effects included model. argument provided default create formula including outcome, age terms random effects. age_interactions Optionally, character vector specifying variable provided fixed create interactions age vars. argument provided default create formula interaction terms.","code":""},{"path":"/reference/dh.makeLmerForm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make formulae for fitting multiple fractional polynomial models — dh.makeLmerForm","text":"Tibble containing two columns: polys = Transformations age_var formula = Formula used input ds.lmerSLMA dh.lmeMultPoly.","code":""},{"path":[]},{"path":"/reference/dh.makeOutcome.html","id":null,"dir":"Reference","previous_headings":"","what":"Group and subset a data frame — dh.makeOutcome","title":"Group and subset a data frame — dh.makeOutcome","text":"early version dh.makeStrata, turn deprecated favour dsTidyverseClient::ds.arrange() |> dsTidyverseClient::ds.group_by() |>  dsTidyverseClient::ds.slice().","code":""},{"path":"/reference/dh.makeOutcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group and subset a data frame — dh.makeOutcome","text":"","code":"dh.makeOutcome(...)"},{"path":"/reference/dh.makeStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates strata of a repeated measures variable within specified age or time bands — dh.makeStrata","title":"Creates strata of a repeated measures variable within specified age or time bands — dh.makeStrata","text":"function attempted replicate process dplyr::arrange() |> dplyr::group_by() |>  dplyr::sort(). deprecated operation can done much quickly flexibly using dsTidyverseClient::ds.arrange() |> dsTidyverseClient::ds.group_by() |>  dsTidyverseClient::ds.slice().","code":""},{"path":"/reference/dh.makeStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates strata of a repeated measures variable within specified age or time bands — dh.makeStrata","text":"","code":"dh.makeStrata(   df = NULL,   id_var = NULL,   age_var = NULL,   var_to_subset = NULL,   bands = NULL,   mult_action = NULL,   mult_vals = NULL,   keep_vars = NULL,   new_obj = NULL,   band_action = NULL,   conns = NULL,   checks = TRUE,   df_name = NULL )"},{"path":"/reference/dh.makeStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates strata of a repeated measures variable within specified age or time bands — dh.makeStrata","text":"df Character specifying server-side data frame. id_var Character giving name column within df uniquely identifies subject. age_var Character specifying age time variable df. var_to_subset Character specifying variable df stratify according bands. bands Numeric vector alternating lower upper values specifying bands derive strata var_to_subset. vector even number twice length number bands required. mult_action Character specifying handle cases subject one measurement within specified band. Use \"earliest\" take earliest measurement, \"latest\" take latest measurement \"nearest\" take measurement nearest value(s) specified mult_vals. mult_vals Numeric vector specifying value age band chose values closest subjects one value per band. Required mult_action \"nearest\". order length vector correspond order number bands. keep_vars Optionally, vector variable names within df include within strata created. new_obj Character specifying name created serverside object. band_action Character specifying values provided bands evaluated creating strata: \"g_l\" = greater lowest band less highest band \"ge_le\" = greater equal lowest band less equal highest band \"g_le\" = greater lowest band less equal highest band \"ge_l\" = greater equal lowest band less highest band conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE. df_name Retired argument name. Please use `new_obj' instead.","code":""},{"path":"/reference/dh.makeStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates strata of a repeated measures variable within specified age or time bands — dh.makeStrata","text":"Servside dataframe wide format containing derived variables. band specified least two variables returned: var_to_subset age_var. suffix .lower_band identifies band variable. argument keep_vars NULL, additional variables added data frame representing variables within strata created.","code":""},{"path":"/reference/dh.meanByGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Describes a numeric variable by strata of another numeric grouping variable. — dh.meanByGroup","title":"Describes a numeric variable by strata of another numeric grouping variable. — dh.meanByGroup","text":"similar functionality tapply dplyr chain group_by %>% summarise. offers additional flexilibity ds.tapply allows specify upper lower values strata. contrast, ds.tapply produce summary based every unique value grouping variable, may always required.","code":""},{"path":"/reference/dh.meanByGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describes a numeric variable by strata of another numeric grouping variable. — dh.meanByGroup","text":"","code":"dh.meanByGroup(   df = NULL,   outcome = NULL,   group_var = NULL,   intervals = NULL,   conns = NULL,   checks = FALSE )"},{"path":"/reference/dh.meanByGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describes a numeric variable by strata of another numeric grouping variable. — dh.meanByGroup","text":"df Character specifying server-side data frame. outcome String specifying outcome variable within df. group_var String specifying grouping variable within 'df'. intervals Optionally, numeric vector defining stratify group_var. Values specify alternately lower upper values strata. NULL, outcome summarised every unique value group_var. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE.","code":""},{"path":"/reference/dh.meanByGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describes a numeric variable by strata of another numeric grouping variable. — dh.meanByGroup","text":"Tibble containing mean values strata group_var.","code":""},{"path":[]},{"path":"/reference/dh.metaManual.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to manaully perform two-stage meta-analysis using metafor — dh.metaManual","title":"Wrapper to manaully perform two-stage meta-analysis using metafor — dh.metaManual","text":"DataSHIELD SLMA functions automatically perform two-stage meta-analysis using metafor package. However circumstances might want chose different options metafor provided within DataSHIELD. function takes output ds.glmSLMA manually performs meta-analysis.","code":""},{"path":"/reference/dh.metaManual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to manaully perform two-stage meta-analysis using metafor — dh.metaManual","text":"","code":"dh.metaManual(model = NULL, method = \"ML\")"},{"path":"/reference/dh.metaManual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to manaully perform two-stage meta-analysis using metafor — dh.metaManual","text":"model Model object returned ds.glmSLMA ds.lmerSLMA. method Method meta-analyis can valid method metafor package. Default \"ML\".","code":""},{"path":"/reference/dh.metaManual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to manaully perform two-stage meta-analysis using metafor — dh.metaManual","text":"List containing two elements: metafor output summary tibble containing columns \"term\", \"coefficient\" \"se\".","code":""},{"path":"/reference/dh.metaManual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper to manaully perform two-stage meta-analysis using metafor — dh.metaManual","text":"also modify function use different meta-analysis packages.","code":""},{"path":"/reference/dh.metaSepModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Function in progress to meta-analyse separate models. — dh.metaSepModels","title":"Function in progress to meta-analyse separate models. — dh.metaSepModels","text":"Function progress meta-analyse separate models.","code":""},{"path":"/reference/dh.metaSepModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function in progress to meta-analyse separate models. — dh.metaSepModels","text":"","code":"dh.metaSepModels(   input = \"fit\",   ref = NULL,   exp = NULL,   method = NULL,   output = \"both\" )"},{"path":"/reference/dh.metaSepModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function in progress to meta-analyse separate models. — dh.metaSepModels","text":"input Character; \"fit\" use output ds.glmSLMA; \"stats\" use output ds.lmTab. ref Tibble, output dh.multGlm. exp Logical, whether exponentiate coefficients meta-analysis method Method meta-analysing coefficients. output Character; \"cohort\" return cohort coefficients , \"meta\" return meta-analysed coefficients , \"\" return .","code":""},{"path":"/reference/dh.metaSepModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function in progress to meta-analyse separate models. — dh.metaSepModels","text":"tibble","code":""},{"path":"/reference/dh.multGLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Loop multiple GLM models and handle errors & non-convergence — dh.multGLM","title":"Loop multiple GLM models and handle errors & non-convergence — dh.multGLM","text":"function allows fit different glm models different cohorts, example want include different covariates different cohorts.","code":""},{"path":"/reference/dh.multGLM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loop multiple GLM models and handle errors & non-convergence — dh.multGLM","text":"","code":"dh.multGLM(   df = NULL,   ref = NULL,   checks = TRUE,   conns = NULL,   vary_df = F,   family = \"gaussian\",   weights = NULL )"},{"path":"/reference/dh.multGLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loop multiple GLM models and handle errors & non-convergence — dh.multGLM","text":"df Character specifying server-side data frame. ref reference tibble, output dh.buildModels. checks Logical; TRUE checks performed prior running function. Default TRUE. conns DataSHIELD connections object. vary_df Option provide different df different models. Default FALSE. family Family use glm models. Default \"gaussian\". weights Optional, serverside object containing weights used model.","code":""},{"path":"/reference/dh.multGLM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loop multiple GLM models and handle errors & non-convergence — dh.multGLM","text":"Tibble containing five columns: model = Description model fit, taken model_name. formula = Formula model, taken formulae. cohort = Cohort model fit, taken cohort. fit = Output glm model. converged = Logical; whether model converged/fit'.","code":""},{"path":"/reference/dh.pool.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Rubin's pooling on a list of imputed generalized linear models. — dh.pool","title":"Perform Rubin's pooling on a list of imputed generalized linear models. — dh.pool","text":"Perform Rubin's pooling list imputed generalized linear models.","code":""},{"path":"/reference/dh.pool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Rubin's pooling on a list of imputed generalized linear models. — dh.pool","text":"","code":"dh.pool(   imputed_glm = NULL,   type = NULL,   coh_names = NULL,   family = NULL,   exponentiate = FALSE )"},{"path":"/reference/dh.pool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Rubin's pooling on a list of imputed generalized linear models. — dh.pool","text":"imputed_glm list imputed generalized linear models. type Character specifying type object provided model. Can either \"glm_ipd\", \"glm_slma\" \"lmer_slma\". coh_names Character vector cohorts included imputed_glm. Note must order cohorts included model. family Specifies family used analysis type \"glm_ipd\" \"glm_slma\". Options \"gaussian\" \"binomial\", default \"gaussian\". exponentiate Optionally, specify whether estimates binomial models exponentiated, ie returned odds ratios. argument ignored type \"gaussian\".","code":""},{"path":"/reference/dh.pool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Rubin's pooling on a list of imputed generalized linear models. — dh.pool","text":"tibble containing Rubin's pooled estimates confidence intervals.","code":""},{"path":"/reference/dh.pool.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Rubin's pooling on a list of imputed generalized linear models. — dh.pool","text":"function performs Rubin's pooling list imputed generalized linear models. extracts coefficients using specified parameters, tidies coefficients, performs pooling.","code":""},{"path":"/reference/dh.predictLmer.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets predicted values based on a new dataframe for lmer models — dh.predictLmer","title":"Gets predicted values based on a new dataframe for lmer models — dh.predictLmer","text":"Currently predict method lmer models within DataSHIELD. function replicates , calculating predicted values fixed effects based model coefficients. Standard errors returned individual cohorts yet pooled models.","code":""},{"path":"/reference/dh.predictLmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets predicted values based on a new dataframe for lmer models — dh.predictLmer","text":"","code":"dh.predictLmer(model = NULL, new_data = NULL, coh_names = NULL)"},{"path":"/reference/dh.predictLmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets predicted values based on a new dataframe for lmer models — dh.predictLmer","text":"model Model object returned ds.lmerSLMA. new_data Tibble data frame containing values variables model predict values outcome. column names new_data must identical model, variables included model must present new_data. coh_names Please specify 'conns' instead. Vector cohort names. must order cohorts specified model.","code":""},{"path":"/reference/dh.predictLmer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets predicted values based on a new dataframe for lmer models — dh.predictLmer","text":"Tibble predicted outcome values based values provided new_data.","code":""},{"path":[]},{"path":"/reference/dh.quartileSplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits a continuous variables into four quartiles — dh.quartileSplit","title":"Splits a continuous variables into four quartiles — dh.quartileSplit","text":"sensitivity analyses may want examine potential non-linear associations exposure outcome. function splits continuous variable four continuous variables representing quartile original variable. Participants measurement within quartile assigned NA.","code":""},{"path":"/reference/dh.quartileSplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits a continuous variables into four quartiles — dh.quartileSplit","text":"","code":"dh.quartileSplit(   df = NULL,   var = NULL,   new_obj = NULL,   band_action = NULL,   type = NULL,   var_suffix = \"_q_\",   conns = NULL )"},{"path":"/reference/dh.quartileSplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits a continuous variables into four quartiles — dh.quartileSplit","text":"df Character specifying server-side data frame. var Character specifying continuous variable transform quartiles. new_obj Character specifying name created serverside object. band_action Character specifying quartiles separated: \"g_l\" = greater lowest band less highest band \"ge_le\" = greater equal lowest band less equal highest band \"g_le\" = greater lowest band less equal highest band \"ge_l\" = greater equal lowest band less highest band type Character specifying whether derive quartiles combined data within cohort. Use \"combine\" use combined quartiles, \"split\" use cohort-specific quartiles. var_suffix Character specifying suffix give created variable. Default \"q\" conns DataSHIELD connections object.","code":""},{"path":"/reference/dh.quartileSplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits a continuous variables into four quartiles — dh.quartileSplit","text":"Servside dataframe containing maximum four additional variables representing quantiles original variable. cohort insufficient observations within quartile (less filter threshold) variable created warning returned.","code":""},{"path":[]},{"path":"/reference/dh.renameVars.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename one or more columns within a serverside data frame — dh.renameVars","title":"Rename one or more columns within a serverside data frame — dh.renameVars","text":"function analogue dplyr::rename(). deprecated can now use dsTidyverseClient::ds.rename() much quicker flexible.","code":""},{"path":"/reference/dh.renameVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename one or more columns within a serverside data frame — dh.renameVars","text":"","code":"dh.renameVars(   df = NULL,   current_names = NULL,   new_names,   conns = NULL,   checks = TRUE )"},{"path":"/reference/dh.renameVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename one or more columns within a serverside data frame — dh.renameVars","text":"df Character specifying server-side data frame. current_names Character vector columns within df rename. new_names Character vector giving new names columns specified current_names. conns DataSHIELD connections object. checks Logical; TRUE checks performed prior running function. Default TRUE.","code":""},{"path":"/reference/dh.renameVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename one or more columns within a serverside data frame — dh.renameVars","text":"Data frame specified df returned server-side variables renamed.","code":""},{"path":"/reference/dh.stablisedWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Stabilized Weights Using ds.glmSLMA output and outcome proportions. — dh.stablisedWeights","title":"Generate Stabilized Weights Using ds.glmSLMA output and outcome proportions. — dh.stablisedWeights","text":"calculates stablised inverse probability weights. Currently works binary outcome variable.","code":""},{"path":"/reference/dh.stablisedWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Stabilized Weights Using ds.glmSLMA output and outcome proportions. — dh.stablisedWeights","text":"","code":"dh.stablisedWeights(   glm_object = NULL,   responder_df = NULL,   responder_var = NULL,   non_responder_level,   responder_level,   new_obj = NULL,   conns = NULL )"},{"path":"/reference/dh.stablisedWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Stabilized Weights Using ds.glmSLMA output and outcome proportions. — dh.stablisedWeights","text":"glm_object fitted ds.glmSLMA object. responder_df serverside data frame containing responder variable. responder_var Character vector outcome variable within responder_df. non_responder_level Character vector indicating level responder_var corresponding non-responders. responder_level Character vector indicating level responder_var corresponding responders. new_obj character string name new object store stabilized weights. conns DataSHIELD connections object.","code":""},{"path":"/reference/dh.stablisedWeights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Stabilized Weights Using ds.glmSLMA output and outcome proportions. — dh.stablisedWeights","text":"Stabilized weights assigned serverside object new_obj","code":""},{"path":"/reference/dh.stablisedWeights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Stabilized Weights Using ds.glmSLMA output and outcome proportions. — dh.stablisedWeights","text":"function performs following steps: Generate predicted values GLM model. Calculate proportions binary outcome using outcome data. Format proportions data analysis. Create stabilized weights using formatted proportions GLM predictions.","code":""},{"path":"/reference/dh.stablisedWeights.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate Stabilized Weights Using ds.glmSLMA output and outcome proportions. — dh.stablisedWeights","text":"Currently works binary outcome variable.","code":""},{"path":"/reference/dh.subjHasData.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify subjects with available data — dh.subjHasData","title":"Identify subjects with available data — dh.subjHasData","text":"early version dh.defineCases() turn deprecated. Please use dsTidyverseClient::ds.filter()","code":""},{"path":"/reference/dh.subjHasData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify subjects with available data — dh.subjHasData","text":"","code":"dh.subjHasData()"},{"path":"/reference/dh.tidyEnv.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove multiple objects from the serverside environment — dh.tidyEnv","title":"Remove multiple objects from the serverside environment — dh.tidyEnv","text":"wrapper around ds.rm intended allow removal multiple objects one call. deprecated realised already possible ds.rm()","code":""},{"path":"/reference/dh.tidyEnv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove multiple objects from the serverside environment — dh.tidyEnv","text":"","code":"dh.tidyEnv(obj = NULL, type = NULL, conns = NULL)"},{"path":"/reference/dh.tidyEnv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove multiple objects from the serverside environment — dh.tidyEnv","text":"obj Server-side objects want either keep remove. type Either \"remove\" remove objects specified obj \"keep\" keep objects specified obj remove everything else. conns DataSHIELD connections object.","code":""},{"path":"/reference/dh.tidyEnv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove multiple objects from the serverside environment — dh.tidyEnv","text":"None. Objects removed server-side environnment.","code":""},{"path":"/reference/dh.trimPredData.html","id":null,"dir":"Reference","previous_headings":"","what":"Trims predicted values based on min and max values provided — dh.trimPredData","title":"Trims predicted values based on min and max values provided — dh.trimPredData","text":"used conjuncture ds.predictLmer. new data frame used prediction may contain age time values present original data. allows remove predicted values beyond minimum maximum age. ensures plots show predict values range actually data.","code":""},{"path":"/reference/dh.trimPredData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trims predicted values based on min and max values provided — dh.trimPredData","text":"","code":"dh.trimPredData(   pred = NULL,   coh_names = NULL,   age = \"age\",   min = NULL,   max = NULL )"},{"path":"/reference/dh.trimPredData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trims predicted values based on min and max values provided — dh.trimPredData","text":"pred Tibble predicted values returned dh.predictLmer. coh_names Character Vector cohort names corresponding cohorts included pred. age Character specifying name age variable pred. min Vector minimum values age length equal number cohorts pred. max Vector maximum values age length equal number cohorts pred.","code":""},{"path":"/reference/dh.trimPredData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trims predicted values based on min and max values provided — dh.trimPredData","text":"pred returned tibble predicted values outside min max removed.","code":""},{"path":[]},{"path":"/reference/dh.zByGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates z-scores within specified bands — dh.zByGroup","title":"Creates z-scores within specified bands — dh.zByGroup","text":"Especially mental health outcomes, often want transform raw scores z-scores, within certain age bands (e.g. measurement occasion per year). function .","code":""},{"path":"/reference/dh.zByGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates z-scores within specified bands — dh.zByGroup","text":"","code":"dh.zByGroup(df, out_var, age_var, low_band, upp_band, conns, new_obj)"},{"path":"/reference/dh.zByGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates z-scores within specified bands — dh.zByGroup","text":"df Character specifying server-side data frame. out_var Variable make z-scores age_var Age variable low_band Lower band z score upp_band Upper band z score conns DataSHIELD connections object. new_obj Character specifying name created serverside object.","code":""},{"path":"/reference/dh.zByGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates z-scores within specified bands — dh.zByGroup","text":"Z score serverside within specified bands","code":""},{"path":[]},{"path":"/reference/dot-onLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization functions to do init actions — .onLoad","title":"Initialization functions to do init actions — .onLoad","text":"Initialization functions init actions","code":""},{"path":"/reference/dot-onLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialization functions to do init actions — .onLoad","text":"","code":".onLoad(libname, pkgname)"},{"path":"/reference/dot-onLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization functions to do init actions — .onLoad","text":"pkgname package name name library","code":""},{"path":"/reference/dsHelper-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct functions in package dsHelper. — dsHelper-defunct","title":"Defunct functions in package dsHelper. — dsHelper-defunct","text":"functions listed defunct longer available. possible, alternative functions similar functionality mentioned. Help pages deprecated functions available help(\"<function>-defunct\").","code":""},{"path":"/reference/dsHelper-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defunct functions in package dsHelper. — dsHelper-defunct","text":"","code":"dh.meanByAge(...)"},{"path":"/reference/dsHelper-defunct.html","id":"dh-meanbyage","dir":"Reference","previous_headings":"","what":"dh.meanByAge","title":"Defunct functions in package dsHelper. — dsHelper-defunct","text":"dh.meanByAge, use dh.meanByGroup().","code":""},{"path":"/reference/dsHelper-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dsHelper: Helper Functions for Use with 'DataSHIELD' — dsHelper-package","title":"dsHelper: Helper Functions for Use with 'DataSHIELD' — dsHelper-package","text":"Often need automate things 'DataSHIELD'. functions help .","code":""},{"path":[]},{"path":"/reference/dsHelper-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dsHelper: Helper Functions for Use with 'DataSHIELD' — dsHelper-package","text":"Maintainer: Tim Cadman t.cadman@bristol.ac.uk (ORCID) contributors: Sido Haakma s.haakma@rug.nl (ORCID) [contributor] Tom Bishop tom.bishop@mrc-epid.cam.ac.uk [contributor]","code":""},{"path":"/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits character by '$' and returns the single characters — extract","title":"Splits character by '$' and returns the single characters — extract","text":"internal function.","code":""},{"path":"/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits character by '$' and returns the single characters — extract","text":"","code":"extract(input)"},{"path":"/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits character by '$' and returns the single characters — extract","text":"input vector list characters","code":""},{"path":"/reference/extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits character by '$' and returns the single characters — extract","text":"vector characters","code":""},{"path":"/reference/extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Splits character by '$' and returns the single characters — extract","text":"required","code":""},{"path":"/reference/isDefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if the objects are defined in all studies — isDefined","title":"Checks if the objects are defined in all studies — isDefined","text":"internal function.","code":""},{"path":"/reference/isDefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if the objects are defined in all studies — isDefined","text":"","code":"isDefined(datasources = NULL, obj = NULL, error.message = TRUE)"},{"path":"/reference/isDefined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if the objects are defined in all studies — isDefined","text":"datasources list DSConnection-class() objects obtained login. datasources argument specified, default set connections used: see datashield.connections_default(). obj character vector, name object(s) look . error.message Boolean specifies function stop return error message input object defined one studies return list TRUE/FALSE indicating studies object defined","code":""},{"path":"/reference/isDefined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if the objects are defined in all studies — isDefined","text":"returns error message error.message argument set TRUE (default) input object defined one studies, Boolean value error.message argument set FALSE.","code":""},{"path":"/reference/isDefined.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks if the objects are defined in all studies — isDefined","text":"DataSHIELD object included analysis must defined (.e. exists) studies. process halt.","code":""},{"path":"/reference/isDefined.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Checks if the objects are defined in all studies — isDefined","text":"Demetris Avraam DataSHIELD Development Team","code":""}]
